<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/05/22/huawei-compatible_tmp/"/>
      <url>/2019/05/22/huawei-compatible_tmp/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.8.0"><title>huawei-compatible.md</title><meta http-equiv="Content-type" content="text/html;charset=UTF-8"><style>/*--------------------------------------------------------------------------------------------- *  Copyright (c) Microsoft Corporation. All rights reserved. *  Licensed under the MIT License. See License.txt in the project root for license information. *--------------------------------------------------------------------------------------------*/body {font-family: "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";font-size: 14px;padding: 0 12px;line-height: 22px;word-wrap: break-word;}#code-csp-warning {position: fixed;top: 0;right: 0;color: white;margin: 16px;text-align: center;font-size: 12px;font-family: sans-serif;background-color:#444444;cursor: pointer;padding: 6px;box-shadow: 1px 1px 1px rgba(0,0,0,.25);}#code-csp-warning:hover {text-decoration: none;background-color:#007acc;box-shadow: 2px 2px 2px rgba(0,0,0,.25);}body.scrollBeyondLastLine {margin-bottom: calc(100vh - 22px);}body.showEditorSelection .code-line {position: relative;}body.showEditorSelection .code-active-line:before,body.showEditorSelection .code-line:hover:before {content: "";display: block;position: absolute;top: 0;left: -12px;height: 100%;}body.showEditorSelection li.code-active-line:before,body.showEditorSelection li.code-line:hover:before {left: -30px;}.vscode-light.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(0, 0, 0, 0.15);}.vscode-light.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(0, 0, 0, 0.40);}.vscode-dark.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(255, 255, 255, 0.4);}.vscode-dark.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(255, 255, 255, 0.60);}.vscode-high-contrast.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(255, 160, 0, 0.7);}.vscode-high-contrast.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(255, 160, 0, 1);}img {max-width: 100%;max-height: 100%;}a {color: #4080D0;text-decoration: none;}a:focus,input:focus,select:focus,textarea:focus {outline: 1px solid -webkit-focus-ring-color;outline-offset: -1px;}hr {border: 0;height: 2px;border-bottom: 2px solid;}h1 {padding-bottom: 0.3em;line-height: 1.2;border-bottom-width: 1px;border-bottom-style: solid;}h1, h2, h3 {font-weight: normal;}h1 code,h2 code,h3 code,h4 code,h5 code,h6 code {font-size: inherit;line-height: auto;}a:hover {color: #4080D0;text-decoration: underline;}table {border-collapse: collapse;}table > thead > tr > th {text-align: left;border-bottom: 1px solid;}table > thead > tr > th,table > thead > tr > td,table > tbody > tr > th,table > tbody > tr > td {padding: 5px 10px;}table > tbody > tr + tr > td {border-top: 1px solid;}blockquote {margin: 0 7px 0 5px;padding: 0 16px 0 10px;border-left: 5px solid;}code {font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";font-size: 14px;line-height: 19px;}body.wordWrap pre {white-space: pre-wrap;}.mac code {font-size: 12px;line-height: 18px;}pre:not(.hljs),pre.hljs code > div {padding: 16px;border-radius: 3px;overflow: auto;}/** Theming */.vscode-light,.vscode-light pre code {color: rgb(30, 30, 30);}.vscode-dark,.vscode-dark pre code {color: #DDD;}.vscode-high-contrast,.vscode-high-contrast pre code {color: white;}.vscode-light code {color: #A31515;}.vscode-dark code {color: #D7BA7D;}.vscode-light pre:not(.hljs),.vscode-light code > div {background-color: rgba(220, 220, 220, 0.4);}.vscode-dark pre:not(.hljs),.vscode-dark code > div {background-color: rgba(10, 10, 10, 0.4);}.vscode-high-contrast pre:not(.hljs),.vscode-high-contrast code > div {background-color: rgb(0, 0, 0);}.vscode-high-contrast h1 {border-color: rgb(0, 0, 0);}.vscode-light table > thead > tr > th {border-color: rgba(0, 0, 0, 0.69);}.vscode-dark table > thead > tr > th {border-color: rgba(255, 255, 255, 0.69);}.vscode-light h1,.vscode-light hr,.vscode-light table > tbody > tr + tr > td {border-color: rgba(0, 0, 0, 0.18);}.vscode-dark h1,.vscode-dark hr,.vscode-dark table > tbody > tr + tr > td {border-color: rgba(255, 255, 255, 0.18);}.vscode-light blockquote,.vscode-dark blockquote {background: rgba(127, 127, 127, 0.1);border-color: rgba(0, 122, 204, 0.5);}.vscode-high-contrast blockquote {background: transparent;border-color: #fff;}</style><style>/* Base16 Atelier Forest Dark - Theme *//* by Bram de Haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest) *//* Original Base16 color scheme by Chris Kempson (https://github.com/chriskempson/base16) *//* Atelier-Forest Comment */.hljs-comment,.hljs-quote {  color: #9c9491;}/* Atelier-Forest Red */.hljs-variable,.hljs-template-variable,.hljs-attribute,.hljs-tag,.hljs-name,.hljs-regexp,.hljs-link,.hljs-name,.hljs-selector-id,.hljs-selector-class {  color: #f22c40;}/* Atelier-Forest Orange */.hljs-number,.hljs-meta,.hljs-built_in,.hljs-builtin-name,.hljs-literal,.hljs-type,.hljs-params {  color: #df5320;}/* Atelier-Forest Green */.hljs-string,.hljs-symbol,.hljs-bullet {  color: #7b9726;}/* Atelier-Forest Blue */.hljs-title,.hljs-section {  color: #407ee7;}/* Atelier-Forest Purple */.hljs-keyword,.hljs-selector-tag {  color: #6666ea;}.hljs {  display: block;  overflow-x: auto;  background: #1b1918;  color: #a8a19f;  padding: 0.5em;}.hljs-emphasis {  font-style: italic;}.hljs-strong {  font-weight: bold;}</style><style>/* * Markdown PDF CSS */ body {font-family:  "Meiryo", "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";}pre {background-color: #f8f8f8;border: 1px solid #cccccc;border-radius: 3px;overflow-x: auto;white-space: pre-wrap;overflow-wrap: break-word;}pre:not(.hljs) {padding: 23px;line-height: 19px;}blockquote {background: rgba(127, 127, 127, 0.1);border-color: rgba(0, 122, 204, 0.5);}.emoji {height: 1.4em;}/* for inline code */:not(pre):not(.hljs) > code {color: #C9AE75; /* Change the old color so it seems less like an error */font-size: inherit;}/* Page Break : use <div class="page"/> to insert page break-------------------------------------------------------- */.page {page-break-after: always;}</style></head><body><hr><p>title: huawei-compatibledate: 2019-05-14 07:46:06tags:</p><ul><li>huawei-iot</li></ul><p>categories:</p><ul><li>认证</li></ul><hr><p>华为iot Agent lite 认证</p><h1 id="1-%E8%AE%BE%E5%A4%87%E6%8E%A5%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4"><strong>1.</strong> <strong>设备接入和删除</strong></h1><h2 id="11-agentlite%E8%AE%A4%E8%AF%81%E6%8E%A5%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4001">1.1 AgentLite_认证_接入和删除_001</h2><p>测试方法：在平台上注册设备后，进行绑定操作，在平台上从离线变为在线状态</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果3的截图，离线在线状态图各一张，deviceid一致</td></tr></tbody></table><h2 id="12-agentlite%E8%AE%A4%E8%AF%81%E6%8E%A5%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4002">1.2 AgentLite_认证_接入和删除_002</h2><p>测试方法：将已在线的设备删除</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2，3的截图，平台上用deviceid查询此设备时结果为空</td></tr></tbody></table><h2 id="13-agentlite%E8%AE%A4%E8%AF%81%E6%8E%A5%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4003">1.3 AgentLite_认证_接入和删除_003</h2><p>测试方法：设备在线后，下电离线后再删除</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2，3的截图，平台上用deviceid查询此设备时结果为空</td></tr></tbody></table><h1 id></h1><h1 id="2-%E8%AE%BE%E5%A4%87%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5"><strong>2</strong> <strong>设备数据上报</strong></h1><h2 id="21-agentlite%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5001">2.1 AgentLite_认证_数据上报_001</h2><p>测试方法：设备电池供电，上报电量</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="22-agentlite%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5002">2.2 AgentLite_认证_数据上报_002</h2><p>测试方法： 电池供电，低电量时，上报低电量告警</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="23-agentlite%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5003%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89">2.3 AgentLite_认证_数据上报_003（可选）</h2><p>测试方法： 绑定设备成功后，电量也上报到平台，非手动触发上报</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="24-agentlite%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5004">2.4 AgentLite_认证_数据上报_004</h2><p>测试方法： 设备触发基本数据上报，比如温度，湿度等。</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期截图结果2的</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2的截图</td></tr></tbody></table><h2 id="25-agentlite%E8%AE%A4%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8A%E6%8A%A5005">2.5 AgentLite_认证_数据上报_005</h2><p>测试方法： 设备离线状态上报</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2的截图</td></tr></tbody></table><h1 id="3-%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"><strong>3</strong> <strong>初始化（可****选）</strong></h1><h2 id="31-agentlit%E8%AE%A4%E8%AF%81%E5%88%9D%E5%A7%8B%E5%8C%96001">3.1 AgentLit_认证_初始化_001</h2><p>测试方法：初始化设备到出厂设置</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果截图</td></tr></tbody></table><h1 id="4-%E5%8F%AF%E9%9D%A0%E6%80%A7"><strong>4</strong> <strong>可靠性</strong></h1><h2 id="41-agentlite%E8%AE%A4%E8%AF%81%E5%8F%AF%E9%9D%A0%E6%80%A7001">4.1 AgentLite_认证_可靠性_001</h2><p>测试方法：电池供电，插拔传感器电池，10次</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4截图，每次上线下线，上报数据的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4截图，每次上线下线，上报数据的截图</td></tr></tbody></table><h1 id="5-%E7%A8%B3%E5%AE%9A%E6%80%A7"><strong>5</strong> <strong>稳定性</strong></h1><h2 id="51-agentlite%E8%AE%A4%E8%AF%81%E7%A8%B3%E5%AE%9A%E6%80%A7001%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89">5.1 AgentLite_认证_稳定性_001（可选）</h2><p>测试方法：传感器信号干扰测试</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果1截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果1截图</td></tr></tbody></table><h2 id="52-agentlite%E8%AE%A4%E8%AF%81%E7%A8%B3%E5%AE%9A%E6%80%A7002">5.2 AgentLite_认证_稳定性_002</h2><p>测试方法：设备运行72小时，不断电，稳定上报数据</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果2截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2截图</td></tr></tbody></table><h1 id="6-%E5%9B%BA%E4%BB%B6%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E9%80%80%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"><strong>6</strong> <strong>固件升级与回退（可****选）</strong></h1><h2 id="61-agentlite%E8%AE%A4%E8%AF%81%E5%8D%87%E7%BA%A7001">6.1 AgentLite_认证_升级_001</h2><p>测试方法：在平台上传升级包，创建升级任务，下发升级任务给设备。</p><p>测试数据：</p><table><thead><tr><th>平台截图</th><th>预期结果6，7，8，9截图</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="62-agentlite%E8%AE%A4%E8%AF%81%E5%9B%9E%E9%80%80002">6.2 AgentLite_认证_回退_002</h2><p>测试方法：在平台创建回退任务，下发回退任务给设备。</p><p>测试数据：</p><table><thead><tr><th>平台截图</th><th>预期结果6，7，8，9截图</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nb mod companies</title>
      <link href="/2019/05/22/nb-mod-companies/"/>
      <url>/2019/05/22/nb-mod-companies/</url>
      
        <content type="html"><![CDATA[<p><strong>利尔达科技</strong></p><p><strong>移远</strong></p>]]></content>
      
      
      <categories>
          
          <category> 物联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nb-iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/05/22/ubuntu-typora-install_tmp/"/>
      <url>/2019/05/22/ubuntu-typora-install_tmp/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.8.0"><title>ubuntu-typora-install.md</title><meta http-equiv="Content-type" content="text/html;charset=UTF-8"><style>/*--------------------------------------------------------------------------------------------- *  Copyright (c) Microsoft Corporation. All rights reserved. *  Licensed under the MIT License. See License.txt in the project root for license information. *--------------------------------------------------------------------------------------------*/body {font-family: "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";font-size: 14px;padding: 0 12px;line-height: 22px;word-wrap: break-word;}#code-csp-warning {position: fixed;top: 0;right: 0;color: white;margin: 16px;text-align: center;font-size: 12px;font-family: sans-serif;background-color:#444444;cursor: pointer;padding: 6px;box-shadow: 1px 1px 1px rgba(0,0,0,.25);}#code-csp-warning:hover {text-decoration: none;background-color:#007acc;box-shadow: 2px 2px 2px rgba(0,0,0,.25);}body.scrollBeyondLastLine {margin-bottom: calc(100vh - 22px);}body.showEditorSelection .code-line {position: relative;}body.showEditorSelection .code-active-line:before,body.showEditorSelection .code-line:hover:before {content: "";display: block;position: absolute;top: 0;left: -12px;height: 100%;}body.showEditorSelection li.code-active-line:before,body.showEditorSelection li.code-line:hover:before {left: -30px;}.vscode-light.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(0, 0, 0, 0.15);}.vscode-light.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(0, 0, 0, 0.40);}.vscode-dark.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(255, 255, 255, 0.4);}.vscode-dark.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(255, 255, 255, 0.60);}.vscode-high-contrast.showEditorSelection .code-active-line:before {border-left: 3px solid rgba(255, 160, 0, 0.7);}.vscode-high-contrast.showEditorSelection .code-line:hover:before {border-left: 3px solid rgba(255, 160, 0, 1);}img {max-width: 100%;max-height: 100%;}a {color: #4080D0;text-decoration: none;}a:focus,input:focus,select:focus,textarea:focus {outline: 1px solid -webkit-focus-ring-color;outline-offset: -1px;}hr {border: 0;height: 2px;border-bottom: 2px solid;}h1 {padding-bottom: 0.3em;line-height: 1.2;border-bottom-width: 1px;border-bottom-style: solid;}h1, h2, h3 {font-weight: normal;}h1 code,h2 code,h3 code,h4 code,h5 code,h6 code {font-size: inherit;line-height: auto;}a:hover {color: #4080D0;text-decoration: underline;}table {border-collapse: collapse;}table > thead > tr > th {text-align: left;border-bottom: 1px solid;}table > thead > tr > th,table > thead > tr > td,table > tbody > tr > th,table > tbody > tr > td {padding: 5px 10px;}table > tbody > tr + tr > td {border-top: 1px solid;}blockquote {margin: 0 7px 0 5px;padding: 0 16px 0 10px;border-left: 5px solid;}code {font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New", monospace, "Droid Sans Fallback";font-size: 14px;line-height: 19px;}body.wordWrap pre {white-space: pre-wrap;}.mac code {font-size: 12px;line-height: 18px;}pre:not(.hljs),pre.hljs code > div {padding: 16px;border-radius: 3px;overflow: auto;}/** Theming */.vscode-light,.vscode-light pre code {color: rgb(30, 30, 30);}.vscode-dark,.vscode-dark pre code {color: #DDD;}.vscode-high-contrast,.vscode-high-contrast pre code {color: white;}.vscode-light code {color: #A31515;}.vscode-dark code {color: #D7BA7D;}.vscode-light pre:not(.hljs),.vscode-light code > div {background-color: rgba(220, 220, 220, 0.4);}.vscode-dark pre:not(.hljs),.vscode-dark code > div {background-color: rgba(10, 10, 10, 0.4);}.vscode-high-contrast pre:not(.hljs),.vscode-high-contrast code > div {background-color: rgb(0, 0, 0);}.vscode-high-contrast h1 {border-color: rgb(0, 0, 0);}.vscode-light table > thead > tr > th {border-color: rgba(0, 0, 0, 0.69);}.vscode-dark table > thead > tr > th {border-color: rgba(255, 255, 255, 0.69);}.vscode-light h1,.vscode-light hr,.vscode-light table > tbody > tr + tr > td {border-color: rgba(0, 0, 0, 0.18);}.vscode-dark h1,.vscode-dark hr,.vscode-dark table > tbody > tr + tr > td {border-color: rgba(255, 255, 255, 0.18);}.vscode-light blockquote,.vscode-dark blockquote {background: rgba(127, 127, 127, 0.1);border-color: rgba(0, 122, 204, 0.5);}.vscode-high-contrast blockquote {background: transparent;border-color: #fff;}</style><style>/* Tomorrow Theme *//* http://jmblog.github.com/color-themes-for-google-code-highlightjs *//* Original theme - https://github.com/chriskempson/tomorrow-theme *//* Tomorrow Comment */.hljs-comment,.hljs-quote {color: #8e908c;}/* Tomorrow Red */.hljs-variable,.hljs-template-variable,.hljs-tag,.hljs-name,.hljs-selector-id,.hljs-selector-class,.hljs-regexp,.hljs-deletion {color: #c82829;}/* Tomorrow Orange */.hljs-number,.hljs-built_in,.hljs-builtin-name,.hljs-literal,.hljs-type,.hljs-params,.hljs-meta,.hljs-link {color: #f5871f;}/* Tomorrow Yellow */.hljs-attribute {color: #eab700;}/* Tomorrow Green */.hljs-string,.hljs-symbol,.hljs-bullet,.hljs-addition {color: #718c00;}/* Tomorrow Blue */.hljs-title,.hljs-section {color: #4271ae;}/* Tomorrow Purple */.hljs-keyword,.hljs-selector-tag {color: #8959a8;}.hljs {display: block;overflow-x: auto;color: #4d4d4c;padding: 0.5em;}.hljs-emphasis {font-style: italic;}.hljs-strong {font-weight: bold;}</style><style>/* * Markdown PDF CSS */ body {font-family:  "Meiryo", "Segoe WPC", "Segoe UI", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback";}pre {background-color: #f8f8f8;border: 1px solid #cccccc;border-radius: 3px;overflow-x: auto;white-space: pre-wrap;overflow-wrap: break-word;}pre:not(.hljs) {padding: 23px;line-height: 19px;}blockquote {background: rgba(127, 127, 127, 0.1);border-color: rgba(0, 122, 204, 0.5);}.emoji {height: 1.4em;}/* for inline code */:not(pre):not(.hljs) > code {color: #C9AE75; /* Change the old color so it seems less like an error */font-size: inherit;}/* Page Break : use <div class="page"/> to insert page break-------------------------------------------------------- */.page {page-break-after: always;}</style></head><body><hr><p>title: ubuntu-typora-installdate: 2019-05-16 13:02:07tags:</p><ul><li>ubuntu</li></ul><p>categories:</p><ul><li>技术文章</li></ul><hr><pre class="hljs"><code><div><span class="hljs-meta">#</span><span class="bash"> or run:</span><span class="hljs-meta">#</span><span class="bash"> sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span>wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -<span class="hljs-meta">#</span><span class="bash"> add Typora<span class="hljs-string">'s repository</span></span>sudo add-apt-repository 'deb https://typora.io/linux ./'sudo apt-get update<span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> install typora</span></span>sudo apt-get install typora</div></code></pre></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2019/05/22/hexo/"/>
      <url>/2019/05/22/hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-install</title>
      <link href="/2019/05/22/Flutter-install/"/>
      <url>/2019/05/22/Flutter-install/</url>
      
        <content type="html"><![CDATA[<p>flutter 安装</p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>在windows参考下面设置两个环境变量</p><pre><code class="commandline">PUB_HOSTED_URL https://pub.flutter-io.cnFLUTTER_STORAGE_BASE_URL https://storage.flutter-io.cn</code></pre><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>在linux下输入下面命令</p><pre><code class="commandline">export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</code></pre><h1 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h1><p>flutter后解压执行 flutter doctor 等待更新完成</p><pre><code class="commandline"> flutter doctor</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-linux-install</title>
      <link href="/2019/05/22/linux-flutter/"/>
      <url>/2019/05/22/linux-flutter/</url>
      
        <content type="html"><![CDATA[<h2 id="Get-the-Flutter-SDK"><a href="#Get-the-Flutter-SDK" class="headerlink" title="Get the Flutter SDK"></a>Get the Flutter SDK</h2><ol><li><p>Download the following installation bundle to get the latest stable release of the Flutter SDK:</p><p><a href="https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.5.4-hotfix.2-stable.tar.xz" target="_blank" rel="noopener">flutter_linux_v1.5.4-hotfix.2-stable.tar.xz</a></p><p>For other release channels, and older builds, see the <a href="https://flutter.dev/docs/development/tools/sdk/archive" target="_blank" rel="noopener">SDK archive</a> page.</p></li><li><p>Extract the file in the desired location, for example:</p><pre><code>$ cd ~/development$ tar xf ~/Downloads/flutter_linux_v1.5.4-hotfix.2-stable.tar.xz</code></pre></li><li><p>Add the <code>flutter</code> tool to your path:</p><pre><code>$ export PATH=&quot;$PATH:`pwd`/flutter/bin&quot;</code></pre><p>This command sets your <code>PATH</code> variable for the <em>current</em> terminal window only. To permanently add Flutter to your path, see <a href="https://flutter.dev/docs/get-started/install/linux#update-your-path" target="_blank" rel="noopener">Update your path</a>.</p></li><li><p>Optionally, pre-download development binaries:</p><p>The <code>flutter</code> tool downloads platform-specific development binaries as needed. For scenarios where pre-downloading these artifacts is preferable (e.g., hermetic build environments, intermittent network availability), iOS and Android binaries can be downloaded ahead of time by running:</p><pre><code>$ flutter precache</code></pre></li></ol><p>For more details, see <a href="https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path" target="_blank" rel="noopener">this StackExchange question</a>.</p><h3 id="Run-flutter-doctor"><a href="#Run-flutter-doctor" class="headerlink" title="Run flutter doctor"></a>Run flutter doctor</h3><p>Run the following command to see if there are any dependencies you need to install to complete the setup (for verbose output, add the <code>-v</code> flag):</p><pre><code>$ flutter doctor</code></pre><p>This command checks your environment and displays a report to the terminal window. The Dart SDK is bundled with Flutter; it is not necessary to install Dart separately. Check the output carefully for other software you may need to install or further tasks to perform (shown in <strong>bold</strong> text).</p><p>For example:</p><pre><code>[-] Android toolchain - develop for Android devices    • Android SDK at /Users/obiwan/Library/Android/sdk    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ    • Try re-installing or updating your Android SDK,      visit https://flutter.dev/setup/#android-setup for detailed instructions.</code></pre><p>The following sections describe how to perform these tasks and finish the setup process.</p><p>Once you have installed any missing dependencies, run the <code>flutter doctor</code> command again to verify that you’ve set everything up correctly.</p><p>The <code>flutter</code> tool uses Google Analytics to anonymously report feature usage statistics and basic crash reports. This data is used to help improve Flutter tools over time. Analytics is not sent on the very first run or for any runs involving <code>flutter config</code>, so you can opt out of analytics before any data is sent. To disable reporting, type <code>flutter config --no-analytics</code> and to display the current setting, type <code>flutter config</code>. See Google’s <a href="https://policies.google.com/privacy" target="_blank" rel="noopener">Privacy Policy</a>.</p><h3 id="Update-your-path"><a href="#Update-your-path" class="headerlink" title="Update your path"></a>Update your path</h3><p>You can update your PATH variable for the current session only at the command line, as shown in <a href="https://flutter.dev/docs/get-started/install/linux#get-sdk" target="_blank" rel="noopener">Get the Flutter SDK</a>. You’ll probably want to update this variable permanently, so you can run <code>flutter</code> commands in any terminal session.</p><p>The steps for modifying this variable permanently for all terminal sessions are machine-specific. Typically you add a line to a file that is executed whenever you open a new window. For example:</p><ol><li><p>Determine the directory where you placed the Flutter SDK. You will need this in Step 3.</p></li><li><p>Open (or create) <code>$HOME/.bash_profile</code>. The file path and filename might be different on your machine.</p></li><li><p>Add the following line and change <code>[PATH_TO_FLUTTER_GIT_DIRECTORY]</code> to be the path where you cloned Flutter’s git repo:</p><pre><code>$ export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;</code></pre></li><li><p>Run <code>source $HOME/.bash_profile</code> to refresh the current window.</p></li><li><p>Verify that the <code>flutter/bin</code> directory is now in your PATH by running:</p><pre><code>$ echo $PATH</code></pre></li></ol><p>For more details, see <a href="https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path" target="_blank" rel="noopener">this StackExchange question</a>.</p><h2 id="Android-setup"><a href="#Android-setup" class="headerlink" title="Android setup"></a>Android setup</h2><p> <strong>Note:</strong> Flutter relies on a full installation of Android Studio to supply its Android platform dependencies. However, you can write your Flutter apps in a number of editors; a later step will discuss that.</p><h3 id="Install-Android-Studio"><a href="#Install-Android-Studio" class="headerlink" title="Install Android Studio"></a>Install Android Studio</h3><ol><li>Download and install <a href="https://developer.android.com/studio" target="_blank" rel="noopener">Android Studio</a>.</li><li>Start Android Studio, and go through the ‘Android Studio Setup Wizard’. This installs the latest Android SDK, Android SDK Platform-Tools, and Android SDK Build-Tools, which are required by Flutter when developing for Android.</li></ol><h3 id="Set-up-your-Android-device"><a href="#Set-up-your-Android-device" class="headerlink" title="Set up your Android device"></a>Set up your Android device</h3><p>To prepare to run and test your Flutter app on an Android device, you’ll need an Android device running Android 4.1 (API level 16) or higher.</p><ol><li>Enable <strong>Developer options</strong> and <strong>USB debugging</strong> on your device. Detailed instructions are available in the <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener">Android documentation</a>.</li><li>Windows-only: Install the <a href="https://developer.android.com/studio/run/win-usb" target="_blank" rel="noopener">Google USB Driver</a></li><li>Using a USB cable, plug your phone into your computer. If prompted on your device, authorize your computer to access your device.</li><li>In the terminal, run the <code>flutter devices</code> command to verify that Flutter recognizes your connected Android device.</li></ol><p>By default, Flutter uses the version of the Android SDK where your <code>adb</code> tool is based. If you want Flutter to use a different installation of the Android SDK, you must set the <code>ANDROID_HOME</code> environment variable to that installation directory.</p><h3 id="Set-up-the-Android-emulator"><a href="#Set-up-the-Android-emulator" class="headerlink" title="Set up the Android emulator"></a>Set up the Android emulator</h3><p>To prepare to run and test your Flutter app on the Android emulator, follow these steps:</p><ol><li><p>Enable <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">VM acceleration</a> on your machine.</p></li><li><p>Launch <strong>Android Studio &gt; Tools &gt; Android &gt; AVD Manager</strong> and select <strong>Create Virtual Device</strong>. (The <strong>Android</strong> submenu is only present when inside an Android project.)</p></li><li><p>Choose a device definition and select <strong>Next</strong>.</p></li><li><p>Select one or more system images for the Android versions you want to emulate, and select <strong>Next</strong>. An <em>x86</em> or <em>x86_64</em> image is recommended.</p></li><li><p>Under Emulated Performance, select <strong>Hardware - GLES 2.0</strong> to enable <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">hardware acceleration</a>.</p></li><li><p>Verify the AVD configuration is correct, and select <strong>Finish</strong>.</p><p>For details on the above steps, see <a href="https://developer.android.com/studio/run/managing-avds" target="_blank" rel="noopener">Managing AVDs</a>.</p></li><li><p>In Android Virtual Device Manager, click <strong>Run</strong> in the toolbar. The emulator starts up and displays the default canvas for your selected OS version and device.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu adb error</title>
      <link href="/2019/05/21/android-ubuntu-adb-error/"/>
      <url>/2019/05/21/android-ubuntu-adb-error/</url>
      
        <content type="html"><![CDATA[<h1 id="1-終端-輸入命令：-lsusb"><a href="#1-終端-輸入命令：-lsusb" class="headerlink" title="1. 終端 輸入命令： lsusb"></a>1. 終端 輸入命令： lsusb</h1><pre><code class="shell">Bus 002 Device 003: ID 046d:c05a Logitech, Inc. M90/M100 Optical MouseBus 002 Device 002: ID 8087:8000 Intel Corp.Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hubBus 001 Device 125: ID 0e8d:200a MediaTek Inc.Bus 001 Device 002: ID 8087:8008 Intel Corp.Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hubBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</code></pre><p>找到手機對應的那一行，這裡是</p><p>Bus 001 Device 125: ID 0e8d:200a MediaTek Inc.</p><h2 id="2-然後"><a href="#2-然後" class="headerlink" title="2. 然後"></a>2. 然後</h2><pre><code class="shell">vim /etc/udev/rules.d/51-android.rules</code></pre><p>添加以下這行到文件中：</p><p>SUBSYSTEM==”usb”, ATTR{idVendor}==”0e8d”, MODE=”200a”, GROUP=”plugdev”</p><h2 id="3-再執行"><a href="#3-再執行" class="headerlink" title="3. 再執行"></a>3. 再執行</h2><pre><code class="shell">chmod a+r /etc/udev/rules.d/51-android.rules</code></pre><h2 id="4-再執行以下命令"><a href="#4-再執行以下命令" class="headerlink" title="4. 再執行以下命令"></a>4. 再執行以下命令</h2><pre><code class="shell">adb kill-serveradb devices </code></pre><p>就顯示如下的了：</p><pre><code>List of devices attached0123456789ABCDEF    device</code></pre><p>作者：champwang<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/champwang/article/details/53584593" target="_blank" rel="noopener">https://blog.csdn.net/champwang/article/details/53584593</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm node update</title>
      <link href="/2019/05/20/nodejs-npm-update/"/>
      <url>/2019/05/20/nodejs-npm-update/</url>
      
        <content type="html"><![CDATA[<h2 id="npm-更新"><a href="#npm-更新" class="headerlink" title="npm 更新"></a>npm 更新</h2><pre><code>npm install -g npm</code></pre><h2 id="nodejs-更新"><a href="#nodejs-更新" class="headerlink" title="nodejs 更新"></a>nodejs 更新</h2><p><strong>第一步：先清除npm缓存</strong></p><pre><code class="shell">npm cache clean -f</code></pre><p><strong>第二步：安装n模块：</strong></p><pre><code class="shell">npm install -g n</code></pre><p><strong>第三步：升级node.js到最新稳定版：</strong> </p><pre><code class="shell">n stable</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http2</title>
      <link href="/2019/05/20/http2/"/>
      <url>/2019/05/20/http2/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-2-简介"><a href="#HTTP-2-简介" class="headerlink" title="HTTP/2 简介"></a>HTTP/2 简介</h1><p><strong>By</strong> <a href="https://developers.google.com/web/resources/contributors/ilyagrigorik" target="_blank" rel="noopener">Ilya Grigorik</a></p><p>Ilya is a Developer Advocate and Web Perf Guru</p><p><strong>By</strong> <a href="https://developers.google.com/web/resources/contributors/surma" target="_blank" rel="noopener">Surma</a></p><p>Surma is a contributor to Web<strong>Fundamentals</strong></p><p>注：以下内容节选自<a href="http://shop.oreilly.com/product/0636920028048.do" target="_blank" rel="noopener">《高性能浏览器网络》</a>（出版社：O’Reilly，作者：Ilya Grigorik）。 要了解完整版本和相关内容，请访问 <a href="https://hpbn.co/" target="_blank" rel="noopener">hpbn.co</a>。</p><p>HTTP/2 可以让我们的应用更快、更简单、更稳定 - 这几词凑到一块是很罕见的！HTTP/2 将很多以前我们在应用中针对 HTTP/1.1 想出来的“歪招儿”一笔勾销，把解决那些问题的方案内置在了传输层中。 不仅如此，它还为我们进一步优化应用和提升性能提供了全新的机会！</p><p>HTTP/2 的主要目标是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。 为达成这些目标，HTTP/2 还给我们带来了大量其他协议层面的辅助实现，例如新的流控制、错误处理和升级机制。上述几种机制虽然不是全部，但却是最重要的，每一位网络开发者都应该理解并在自己的应用中加以利用。</p><p>HTTP/2 没有改动 HTTP 的应用语义。 HTTP 方法、状态代码、URI 和标头字段等核心概念一如往常。 不过，HTTP/2 修改了数据格式化（分帧）以及在客户端与服务器间传输的方式。这两点统帅全局，通过新的分帧层向我们的应用隐藏了所有复杂性。 因此，所有现有的应用都可以不必修改而在新协议下运行。</p><p><em>为什么不是 HTTP/1.2？</em></p><p>为了实现 HTTP 工作组设定的性能目标，HTTP/2 引入了一个新的二进制分帧层，该层无法与之前的 HTTP/1.x 服务器和客户端向后兼容，因此协议的主版本提升到 HTTP/2。</p><p>即便如此，除非您在实现网络服务器（或自定义客户端），需要使用原始的 TCP 套接字，否则您很可能注意不到任何区别：所有新的低级分帧由客户端和服务器为您执行。 可观察到的唯一区别将是性能的提升和请求优先级、流控制与服务器推送等新功能的出现。</p><h2 id="SPDY-与-HTTP-2-简史"><a href="#SPDY-与-HTTP-2-简史" class="headerlink" title="SPDY 与 HTTP/2 简史"></a>SPDY 与 HTTP/2 简史</h2><p>SPDY 是 Google 开发的一个实验性协议，于 2009 年年中发布，其主要目标是通过解决 HTTP/1.1 中广为人知的一些性能限制来减少网页的加载延迟。具体来说，这个项目设定的目标如下：</p><ul><li>页面加载时间 (PLT) 减少 50%。</li><li>无需网站作者修改任何内容。</li><li>将部署复杂性降至最低，无需变更网络基础设施。</li><li>与开源社区合作开发此新协议。</li><li>收集真实性能数据，验证实验性协议是否有效。</li></ul><p>注：为了达到减少 50% 页面加载时间的目标，SPDY 引入一个新的二进制分帧层，以实现请求和响应复用、优先级和标头压缩，目的是更有效地利用底层 TCP 连接；请参阅<a href="https://hpbn.co/primer-on-web-performance/#latency-as-a-performance-bottleneck" target="_blank" rel="noopener">延迟是性能瓶颈</a>。</p><p>首次发布后不久，Google 的两位软件工程师 Mike Belshe 和 Roberto Peon 就分享了他们对这个新实验性 SPDY 协议的实现结果、文档和源代码：</p><blockquote><p>目前为止，我们只在实验室条件下测试过 SPDY。 最初的成果 很激动人心：通过模拟的家庭网络 连接下载了 25 个最流行的网站之后，我们发现性能的提升特别明显，页面 加载速度最高加快了 55%。 <a href="https://blog.chromium.org/2009/11/2x-faster-web.html" target="_blank" rel="noopener"><em>（Chromium 博客）</em></a></p></blockquote><p>到了 2012 年，这个新的实验性协议得到 Chrome、Firefox 和 Opera 的支持，而且越来越多的大型网站（如 Google、Twitter、Facebook）和小型网站开始在其基础设施内部署 SPDY。 事实上，在被行业越来越多的采用之后，SPDY 已经具备了成为一个标准的条件。</p><p>观察到这一趋势后，HTTP 工作组 (HTTP-WG) 将这一工作提上议事日程，吸取 SPDY 的经验教训，并在此基础上制定了官方“HTTP/2”标准。 在拟定宣言草案、向社会征集 HTTP/2 建议并经过内部讨论之后，HTTP-WG 决定将 SPDY 规范作为新 HTTP/2 协议的基础。</p><p>在接下来几年中，SPDY 和 HTTP/2 继续共同演化，其中 SPDY 作为实验性分支，用于为 HTTP/2 标准测试新功能和建议。 理论不一定适合实践（反之亦然），SPDY 提供一个测试和评估路线，可以对要纳入 HTTP/2 标准中的每条建议进行测试和评估。 最终，这个过程持续了三年，期间产生了十余个中间草案：</p><ul><li>2012 年 3 月：征集 HTTP/2 建议</li><li>2012 年 11 月：第一个 HTTP/2 草案（基于 SPDY）</li><li>2014 年 8 月：HTTP/2 草案 17 和 HPACK 草案 12 发布</li><li>2014 年 8 月：工作组最后一次征集 HTTP/2 建议</li><li>2015 年 2 月：IESG 批准 HTTP/2 和 HPACK 草案</li><li>2015 年 5 月：RFC 7540 (HTTP/2) 和 RFC 7541 (HPACK) 发布</li></ul><p>2015 年初，IESG 审阅了新的 HTTP/2 标准并批准发布。 之后不久，Google Chrome 团队公布了他们为 TLS 弃用 SPDY 和 NPN 扩展的时间表：</p><blockquote><p>与 HTTP/1.1 相比，HTTP/2 的主要变化在于性能提升。 &gt; 一些主要功能（例如复用、标头压缩、优先级和协议协商）演化自之前开放但不标准的协议 (SPDY)。 Chrome 自 Chrome 6 开始就支持 SPDY，但由于大部分优点都集中在 HTTP/2 中，是时候向 SPDY 说再见了。 我们计划于 2016 年初停止对 SPDY 的支持，还会停止对 TLS 的 NPN 扩展的支持，转而在 Chrome 中使用 ALPN。</p><p>强烈建议服务器开发者迁移到 HTTP/2 和 ALPN。 我们很高兴参与到最终催生了 HTTP/2 的开放式标准的制定过程，并且考虑到整个行业在标准化和实现过程中的参与热情，我们希望对这一标准的采纳越来越多。 <a href="https://blog.chromium.org/2015/02/hello-http2-goodbye-spdy.html" target="_blank" rel="noopener"><em>（Chromium&gt; 博客）</em></a></p></blockquote><p>SPDY 与 HTTP/2 的共同演化让服务器、浏览器和网站开发者可以在新协议制定过程中获得真实体验。 因此，HTTP/2 标准自诞生之日起就成为最好并经过大量测试的标准之一。 到 HTTP/2 被 IESG 批准时，已经有很多经过完全测试并且可以立即投入生产的客户端与服务器。 事实上，在最终协议被批准的几周后，由于多款热门浏览器（和许多网站）都部署了完整的 HTTP/2 支持，大量用户都体会到了新协议的好处。</p><h2 id="设计和技术目标"><a href="#设计和技术目标" class="headerlink" title="设计和技术目标"></a>设计和技术目标</h2><p>早期版本的 HTTP 协议的设计初衷主要是实现要简单： HTTP/0.9 只用一行协议就启动了万维网；HTTP/1.0 则是对流行的 HTTP/0.9 扩展的一个正式说明；HTTP 1.1 则是 IETF 的一份官方标准；请参阅 <a href="https://hpbn.co/brief-history-of-http/" target="_blank" rel="noopener">HTTP 简史</a>。 因此，HTTP/0.9-1.x 实现了其目的：HTTP 是应用最广泛、采用最多的一个互联网应用协议。</p><p>然而，实现简单是以牺牲应用性能为代价的： HTTP/1.x 客户端需要使用多个连接才能实现并发和缩短延迟；HTTP/1.x 不会压缩请求和响应标头，从而导致不必要的网络流量；HTTP/1.x 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下；等等。</p><p>这些限制并不是致命的，但是随着网络应用的范围、复杂性以及在我们日常生活中的重要性不断增大，它们对网络开发者和用户都造成了巨大负担，而这正是 HTTP/2 要致力于解决的：</p><blockquote><p>HTTP/2 通过支持标头字段压缩和在同一连接上 进行多个并发交换，让应用更有效地利用网络资源，减少 感知的延迟时间。具体来说，它可以对同一连接上的请求和响应消息进行交错 发送并为 HTTP 标头字段使用 有效编码。 &gt; HTTP/2 还允许为请求设置优先级，让更重要的请求更快速地完成，从而进一步 提升性能。</p><p>出台的协议更有利于网络，因为与 HTTP/1.x 相比，可以使用更少的 TCP 连接。 &gt; 这意味着与其他流的竞争减小，并且连接的持续时间变长，这些特性反过来提高 了可用网络容量的利用率。 最后，HTTP/2 还可以通过使用二进制消息分帧对消息进行更高效 的处理。 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2-17" target="_blank" rel="noopener"><em>（超文本传输协议版本 2，草案 17）</em></a></p></blockquote><p>需要注意的是，HTTP/2 仍是对之前 HTTP 标准的扩展，而非替代。 HTTP 的应用语义不变，提供的功能不变，HTTP 方法、状态代码、URI 和标头字段等这些核心概念也不变。 这些方面的变化都不在 HTTP/2 考虑之列。 虽然高级 API 保持不变，仍有必要了解低级变更如何解决了之前协议的性能限制。 我们来简单了解一下二进制分帧层及其功能。</p><h2 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h2><p>HTTP/2 所有性能增强的核心在于新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。</p><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg" alt="HTTP/2 二进制分帧层"></p><p>这里所谓的“层”，指的是位于套接字接口与应用可见的高级 HTTP API 之间一个经过优化的新编码机制：HTTP 的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的编码方式变了。 HTTP/1.x 协议以换行符作为纯文本的分隔符，而 HTTP/2 将所有传输的信息分割为更小的消息和帧，并采用二进制格式对它们编码。</p><p>这样一来，客户端和服务器为了相互理解，都必须使用新的二进制编码机制：HTTP/1.x 客户端无法理解只支持 HTTP/2 的服务器，反之亦然。 不过不要紧，现有的应用不必担心这些变化，因为客户端和服务器会替我们完成必要的分帧工作。</p><h2 id="数据流、消息和帧"><a href="#数据流、消息和帧" class="headerlink" title="数据流、消息和帧"></a>数据流、消息和帧</h2><p>新的二进制分帧机制改变了客户端与服务器之间交换数据的方式。 为了说明这个过程，我们需要了解 HTTP/2 的三个概念：</p><ul><li><em>数据流</em>：已建立的连接内的双向字节流，可以承载一条或多条消息。</li><li><em>消息</em>：与逻辑请求或响应消息对应的完整的一系列帧。</li><li><em>帧</em>：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流。</li></ul><p>这些概念的关系总结如下：</p><ul><li>所有通信都在一个 TCP 连接上完成，此连接可以承载任意数量的双向数据流。</li><li>每个数据流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。</li><li>每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。</li><li>帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/streams_messages_frames01.svg" alt="HTTP/2 数据流、消息和帧"></p><p>简言之，HTTP/2 将 HTTP 协议通信分解为二进制编码帧的交换，这些帧对应着特定数据流中的消息。所有这些都在一个 TCP 连接内复用。 这是 HTTP/2 协议所有其他功能和性能优化的基础。</p><h2 id="请求与响应复用"><a href="#请求与响应复用" class="headerlink" title="请求与响应复用"></a>请求与响应复用</h2><p>在 HTTP/1.x 中，如果客户端要想发起多个并行请求以提升性能，则必须使用多个 TCP 连接（请参阅<a href="https://hpbn.co/http1x/#using-multiple-tcp-connections" target="_blank" rel="noopener">使用多个 TCP 连接</a>）。 这是 HTTP/1.x 交付模型的直接结果，该模型可以保证每个连接每次只交付一个响应（响应排队）。 更糟糕的是，这种模型也会导致队首阻塞，从而造成底层 TCP 连接的效率低下。</p><p>HTTP/2 中新的二进制分帧层突破了这些限制，实现了完整的请求和响应复用：客户端和服务器可以将 HTTP 消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。</p><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/multiplexing01.svg" alt="一个共享连接内的 HTTP/2 请求和响应复用"></p><p>快照捕捉了同一个连接内并行的多个数据流。 客户端正在向服务器传输一个 <code>DATA</code> 帧（数据流 5），与此同时，服务器正向客户端交错发送数据流 1 和数据流 3 的一系列帧。因此，一个连接上同时有三个并行数据流。</p><p>将 HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是 HTTP 2 最重要的一项增强。事实上，这个机制会在整个网络技术栈中引发一系列连锁反应，从而带来巨大的性能提升，让我们可以：</p><ul><li>并行交错地发送多个请求，请求之间互不影响。</li><li>并行交错地发送多个响应，响应之间互不干扰。</li><li>使用一个连接并行发送多个请求和响应。</li><li>不必再为绕过 HTTP/1.x 限制而做很多工作（请参阅<a href="https://hpbn.co/optimizing-application-delivery/#optimizing-for-http1x" target="_blank" rel="noopener">针对 HTTP/1.x 进行优化</a>，例如级联文件、image sprites 和域名分片。</li><li>消除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间。</li><li><em>等等…</em></li></ul><p>HTTP/2 中的新二进制分帧层解决了 HTTP/1.x 中存在的队首阻塞问题，也消除了并行处理和发送请求及响应时对多个连接的依赖。 结果，应用速度更快、开发更简单、部署成本更低。</p><h2 id="数据流优先级"><a href="#数据流优先级" class="headerlink" title="数据流优先级"></a>数据流优先级</h2><p>将 HTTP 消息分解为很多独立的帧之后，我们就可以复用多个数据流中的帧，客户端和服务器交错发送和传输这些帧的顺序就成为关键的性能决定因素。 为了做到这一点，HTTP/2 标准允许每个数据流都有一个关联的权重和依赖关系：</p><ul><li>可以向每个数据流分配一个介于 1 至 256 之间的整数。</li><li>每个数据流与其他数据流之间可以存在显式依赖关系。</li></ul><p>数据流依赖关系和权重的组合让客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应。 反过来，服务器可以使用此信息通过控制 CPU、内存和其他资源的分配设定数据流处理的优先级，在资源数据可用之后，带宽分配可以确保将高优先级响应以最优方式传输至客户端。</p><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/stream_prioritization01.svg" alt="HTTP/2 数据流依赖关系和权重"></p><p>HTTP/2 内的数据流依赖关系通过将另一个数据流的唯一标识符作为父项引用进行声明；如果忽略标识符，相应数据流将依赖于“根数据流”。 声明数据流依赖关系指出，应尽可能先向父数据流分配资源，然后再向其依赖项分配资源。 换句话说，“请先处理和传输响应 D，然后再处理和传输响应 C”。</p><p>共享相同父项的数据流（即，同级数据流）应按其权重比例分配资源。 例如，如果数据流 A 的权重为 12，其同级数据流 B 的权重为 4，那么要确定每个数据流应接收的资源比例，请执行以下操作：</p><ol><li>将所有权重求和：<code>4 + 12 = 16</code></li><li>将每个数据流权重除以总权重：<code>A = 12/16, B = 4/16</code></li></ol><p>因此，数据流 A 应获得四分之三的可用资源，数据流 B 应获得四分之一的可用资源；数据流 B 获得的资源是数据流 A 所获资源的三分之一。</p><p>我们来看一下上图中的其他几个操作示例。 从左到右依次为：</p><ol><li>数据流 A 和数据流 B 都没有指定父依赖项，依赖于显式“根数据流”；A 的权重为 12，B 的权重为 4。因此，根据比例权重：数据流 B 获得的资源是 A 所获资源的三分之一。</li><li>数据流 D 依赖于根数据流；C 依赖于 D。 因此，D 应先于 C 获得完整资源分配。 权重不重要，因为 C 的依赖关系拥有更高的优先级。</li><li>数据流 D 应先于 C 获得完整资源分配；C 应先于 A 和 B 获得完整资源分配；数据流 B 获得的资源是 A 所获资源的三分之一。</li><li>数据流 D 应先于 E 和 C 获得完整资源分配；E 和 C 应先于 A 和 B 获得相同的资源分配；A 和 B 应基于其权重获得比例分配。</li></ol><p>如上面的示例所示，数据流依赖关系和权重的组合明确表达了资源优先级，这是一种用于提升浏览性能的关键功能，网络中拥有多种资源类型，它们的依赖关系和权重各不相同。 不仅如此，HTTP/2 协议还允许客户端随时更新这些优先级，进一步优化了浏览器性能。 换句话说，我们可以根据用户互动和其他信号更改依赖关系和重新分配权重。</p><p>注：数据流依赖关系和权重表示传输优先级，而不是要求，因此不能保证特定的处理或传输顺序。 即，客户端无法强制服务器通过数据流优先级以特定顺序处理数据流。 尽管这看起来违反直觉，但却是一种必要行为。 我们不希望在优先级较高的资源受到阻止时，还阻止服务器处理优先级较低的资源。</p><h2 id="每个来源一个连接"><a href="#每个来源一个连接" class="headerlink" title="每个来源一个连接"></a>每个来源一个连接</h2><p>有了新的分帧机制后，HTTP/2 不再依赖多个 TCP 连接去并行复用数据流；每个数据流都拆分成很多帧，而这些帧可以交错，还可以分别设定优先级。 因此，所有 HTTP/2 连接都是永久的，而且仅需要每个来源一个连接，随之带来诸多性能优势。</p><blockquote><p>SPDY 和 HTTP/2 的杀手级功能是，可以在一个拥塞受到良好控制的通道上任意进行复用。 这一功能的重要性和良好运行状况让我吃惊。 我喜欢的一个非常不错的指标是连接拆分，这些拆分仅承载一个 HTTP 事务（并因此让该事务承担所有开销）。 对于 HTTP/1，我们 74% 的活动连接仅承载一个事务 - 永久连接并不如我们所有人希望的那般有用。 但是在 HTTP/2 中，这一比例锐减至 25%。 这是在减少开销方面获得的巨大成效。 <a href="http://bitsup.blogspot.co.uk/2015/02/http2-is-live-in-firefox.html" target="_blank" rel="noopener"><em>（HTTP/2 登陆 Firefox，Patrick McManus）</em></a></p></blockquote><p>大多数 HTTP 传输都是短暂且急促的，而 TCP 则针对长时间的批量数据传输进行了优化。 通过重用相同的连接，HTTP/2 既可以更有效地利用每个 TCP 连接，也可以显著降低整体协议开销。 不仅如此，使用更少的连接还可以减少占用的内存和处理空间，也可以缩短完整连接路径（即，客户端、可信中介和源服务器之间的路径） 这降低了整体运行成本并提高了网络利用率和容量。 因此，迁移到 HTTP/2 不仅可以减少网络延迟，还有助于提高通量和降低运行成本。</p><p>注：连接数量减少对提升 HTTPS 部署的性能来说是一项特别重要的功能：可以减少开销较大的 TLS 连接数、提升会话重用率，以及从整体上减少所需的客户端和服务器资源。</p><h2 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h2><p>流控制是一种阻止发送方向接收方发送大量数据的机制，以免超出后者的需求或处理能力：发送方可能非常繁忙、处于较高的负载之下，也可能仅仅希望为特定数据流分配固定量的资源。 例如，客户端可能请求了一个具有较高优先级的大型视频流，但是用户已经暂停视频，客户端现在希望暂停或限制从服务器的传输，以免提取和缓冲不必要的数据。 再比如，一个代理服务器可能具有较快的下游连接和较慢的上游连接，并且也希望调节下游连接传输数据的速度以匹配上游连接的速度来控制其资源利用率；等等。</p><p>上述要求会让您想到 TCP 流控制吗？您应当想到这一点；因为问题基本相同（请参阅<a href="https://hpbn.co/building-blocks-of-tcp/#flow-control" target="_blank" rel="noopener">流控制</a>）。 不过，由于 HTTP/2 数据流在一个 TCP 连接内复用，TCP 流控制既不够精细，也无法提供必要的应用级 API 来调节各个数据流的传输。 为了解决这一问题，HTTP/2 提供了一组简单的构建块，这些构建块允许客户端和服务器实现其自己的数据流和连接级流控制：</p><ul><li>流控制具有方向性。 每个接收方都可以根据自身需要选择为每个数据流和整个连接设置任意的窗口大小。</li><li>流控制基于信用。 每个接收方都可以公布其初始连接和数据流流控制窗口（以字节为单位），每当发送方发出 <code>DATA</code> 帧时都会减小，在接收方发出 <code>WINDOW_UPDATE</code> 帧时增大。</li><li>流控制无法停用。 建立 HTTP/2 连接后，客户端将与服务器交换 <code>SETTINGS</code> 帧，这会在两个方向上设置流控制窗口。 流控制窗口的默认值设为 65,535 字节，但是接收方可以设置一个较大的最大窗口大小（<code>2^31-1</code> 字节），并在接收到任意数据时通过发送 <code>WINDOW_UPDATE</code> 帧来维持这一大小。</li><li>流控制为逐跃点控制，而非端到端控制。 即，可信中介可以使用它来控制资源使用，以及基于自身条件和启发式算法实现资源分配机制。</li></ul><p>HTTP/2 未指定任何特定算法来实现流控制。 不过，它提供了简单的构建块并推迟了客户端和服务器实现，可以实现自定义策略来调节资源使用和分配，以及实现新传输能力，同时提升网页应用的实际性能和感知性能（请参阅<a href="https://hpbn.co/primer-on-web-performance/#speed-performance-and-human-perception" target="_blank" rel="noopener">速度、性能和人类感知</a>）。</p><p>例如，应用层流控制允许浏览器仅提取一部分特定资源，通过将数据流流控制窗口减小为零来暂停提取，稍后再行恢复。 换句话说，它允许浏览器提取图像预览或首次扫描结果，进行显示并允许其他高优先级提取继续，然后在更关键的资源完成加载后恢复提取。</p><h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>HTTP/2 新增的另一个强大的新功能是，服务器可以对一个客户端请求发送多个响应。 换句话说，除了对最初请求的响应外，服务器还可以向客户端推送额外资源（图 12-5），而无需客户端明确地请求。</p><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/push01.svg" alt="服务器为推送资源发起新数据流 (promise) "></p><p>注：HTTP/2 打破了严格的请求-响应语义，支持一对多和服务器发起的推送工作流，在浏览器内外开启了全新的互动可能性。 这是一项使能功能，对我们思考协议、协议用途和使用方式具有重要的长期影响。</p><p>为什么在浏览器中需要一种此类机制呢？一个典型的网络应用包含多种资源，客户端需要检查服务器提供的文档才能逐个找到它们。 那为什么不让服务器提前推送这些资源，从而减少额外的延迟时间呢？ 服务器已经知道客户端下一步要请求什么资源，这时候服务器推送即可派上用场。</p><p>事实上，如果您在网页中内联过 CSS、JavaScript，或者通过数据 URI 内联过其他资产（请参阅<a href="https://hpbn.co/http1x/#resource-inlining" target="_blank" rel="noopener">资源内联</a>），那么您就已经亲身体验过服务器推送了。 对于将资源手动内联到文档中的过程，我们实际上是在将资源推送给客户端，而不是等待客户端请求。 使用 HTTP/2，我们不仅可以实现相同结果，还会获得其他性能优势。 推送资源可以进行以下处理：</p><ul><li>由客户端缓存</li><li>在不同页面之间重用</li><li>与其他资源一起复用</li><li>由服务器设定优先级</li><li>被客户端拒绝</li></ul><h3 id="PUSH-PROMISE-101"><a href="#PUSH-PROMISE-101" class="headerlink" title="PUSH_PROMISE 101"></a>PUSH_PROMISE 101</h3><p>所有服务器推送数据流都由 <code>PUSH_PROMISE</code> 帧发起，表明了服务器向客户端推送所述资源的意图，并且需要先于请求推送资源的响应数据传输。 这种传输顺序非常重要：客户端需要了解服务器打算推送哪些资源，以免为这些资源创建重复请求。 满足此要求的最简单策略是先于父响应（即，<code>DATA</code> 帧）发送所有 <code>PUSH_PROMISE</code> 帧，其中包含所承诺资源的 HTTP 标头。</p><p>在客户端接收到 <code>PUSH_PROMISE</code> 帧后，它可以根据自身情况选择拒绝数据流（通过 <code>RST_STREAM</code> 帧）。 （例如，如果资源已经位于缓存中，便可能会发生这种情况。） 这是一个相对于 HTTP/1.x 的重要提升。 相比之下，使用资源内联（一种受欢迎的 HTTP/1.x“优化”）等同于“强制推送”：客户端无法选择拒绝、取消或单独处理内联的资源。</p><p>使用 HTTP/2，客户端仍然完全掌控服务器推送的使用方式。 客户端可以限制并行推送的数据流数量；调整初始的流控制窗口以控制在数据流首次打开时推送的数据量；或完全停用服务器推送。 这些优先级在 HTTP/2 连接开始时通过 <code>SETTINGS</code> 帧传输，可能随时更新。</p><p>推送的每个资源都是一个数据流，与内嵌资源不同，客户端可以对推送的资源逐一复用、设定优先级和处理。 浏览器强制执行的唯一安全限制是，推送的资源必须符合原点相同这一政策：服务器对所提供内容必须具有权威性。</p><h2 id="标头压缩"><a href="#标头压缩" class="headerlink" title="标头压缩"></a>标头压缩</h2><p>每个 HTTP 传输都承载一组标头，这些标头说明了传输的资源及其属性。 在 HTTP/1.x 中，此元数据始终以纯文本形式，通常会给每个传输增加 500–800 字节的开销。如果使用 HTTP Cookie，增加的开销有时会达到上千字节。 （请参阅<a href="https://hpbn.co/http1x/#measuring-and-controlling-protocol-overhead" target="_blank" rel="noopener">测量和控制协议开销</a>。） 为了减少此开销和提升性能，HTTP/2 使用 HPACK 压缩格式压缩请求和响应标头元数据，这种格式采用两种简单但是强大的技术：</p><ol><li>这种格式支持通过静态霍夫曼代码对传输的标头字段进行编码，从而减小了各个传输的大小。</li><li>这种格式要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。</li></ol><p>利用霍夫曼编码，可以在传输时对各个值进行压缩，而利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的标头键值对。</p><p><img src="https://developers.google.com/web/fundamentals/performance/http2/images/header_compression01.svg" alt="HPACK：HTTP/2 的标头压缩"></p><p>作为一种进一步优化方式，HPACK 压缩上下文包含一个静态表和一个动态表：静态表在规范中定义，并提供了一个包含所有连接都可能使用的常用 HTTP 标头字段（例如，有效标头名称）的列表；动态表最初为空，将根据在特定连接内交换的值进行更新。 因此，为之前未见过的值采用静态 Huffman 编码，并替换每一侧静态表或动态表中已存在值的索引，可以减小每个请求的大小。</p><p>注：在 HTTP/2 中，请求和响应标头字段的定义保持不变，仅有一些微小的差异：所有标头字段名称均为小写，请求行现在拆分成各个 <code>:method</code>、<code>:scheme</code>、<code>:authority</code> 和 <code>:path</code> 伪标头字段。</p><h3 id="HPACK-的安全性和性能"><a href="#HPACK-的安全性和性能" class="headerlink" title="HPACK 的安全性和性能"></a>HPACK 的安全性和性能</h3><p>早期版本的 HTTP/2 和 SPDY 使用 zlib（带有一个自定义字典）压缩所有 HTTP 标头。 这种方式可以将所传输标头数据的大小减小 85% - 88%，显著减少了页面加载时间延迟：</p><blockquote><p>在带宽较低的 DSL 链路中，上行链路速度仅有 375 Kbps，仅压缩请求标头就显著减少了特定网站（即，发出大量资源请求的网站）的页面加载时间。 我们发现，仅仅由于标头压缩，页面加载时间就减少了 45 - 1142 毫秒。 <a href="https://www.chromium.org/spdy/spdy-whitepaper" target="_blank" rel="noopener"><em>（SPDY 白皮书， chromium.org）</em></a></p></blockquote><p>然而，2012 年夏天，出现了针对 TLS 和 SPDY 压缩算法的“犯罪”安全攻击，此攻击会导致会话被劫持。 于是，zlib 压缩算法被 HPACK 替代，后者经过专门设计，可以解决发现的安全问题、实现起来也更高效和简单，当然，可以对 HTTP 标头元数据进行良好压缩。</p><p>如需了解有关 HPACK 压缩算法的完整详情，请参阅 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-header-compression" target="_blank" rel="noopener">IETF HPACK - HTTP/2 的标头压缩</a>。</p><h2 id="深入阅读："><a href="#深入阅读：" class="headerlink" title="深入阅读："></a>深入阅读：</h2><ul><li><a href="https://hpbn.co/http2/" target="_blank" rel="noopener">“HTTP/2”</a> – Ilya Grigorik 所著的完整文章</li><li><a href="https://surma.link/things/h2setup/" target="_blank" rel="noopener">“设置 HTTP/2”</a> – 如何在不同的后端中设置 HTTP/2，作者：Surma</li><li><a href="https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/edit#slide=id.p19" target="_blank" rel="noopener">“HTTP/2”已经粉墨登场，我们一起优化性能吧！”</a> – Ilya Grigorik 在 Velocity 2015 上所作的演示</li><li><a href="https://docs.google.com/document/d/1K0NykTXBbbbTlv60t5MyJvXjqKGsCVNYHyLEXIxYMv0/edit" target="_blank" rel="noopener">“HTTP/2 推送的经验法则”</a> – Tom Bergan、Simon Pelchat 和 Michael Buettner 对何时以及如何使用推送的分析。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown-apt</title>
      <link href="/2019/05/16/markdown/"/>
      <url>/2019/05/16/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 </p><p> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code class="html">这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p><p>HTML 的区段（行内）标签如 <span>、<cite>、<del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <a> 或 <img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</a></del></cite></span></p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p><p>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：</p><p><a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="noopener">http://images.google.com/images?num=30&amp;q=larry+bird</a></p><p>你必须要把网址转换写为：</p><p><a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="noopener">http://images.google.com/images?num=30&amp;q=larry+bird</a></p><p>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。</p><p>所以你如果要在文档中插入一个版权符号©，你可以这样写：</p><pre><code class="html">&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code class="html">AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code class="html">AT&amp;amp;T</code></pre><p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code class="html">4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code class="html">4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <br> 标签。</p><p>如果你确实想要依赖 Markdown 来插入 <br> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <br> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><pre><code class="html">This is an H1=============This is an H2-------------</code></pre><p>任何数量的 = 和 - 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><pre><code class="html"># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code class="html"># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="区块引用Blockquotes"><a href="#区块引用Blockquotes" class="headerlink" title="区块引用Blockquotes"></a>区块引用Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><pre><code class="md">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><pre><code class="md">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><pre><code class="md"> This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code class="md">&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code class="md">*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code class="md">+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code class="md">-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code class="md">1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code class="md">&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code class="md">1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code class="md">3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code class="md">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code class="md">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 </p><p> 标签包起来，举例来说：</p><pre><code class="md">*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code class="md">&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code class="md">*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code class="md">&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code class="md">1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code class="md">*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><pre><code class="md">*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><pre><code class="md">*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法</p><pre><code class="md">1986. What a great season.</code></pre><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code class="md">1986\. What a great season.</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。</code></pre></p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code class="md">这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code class="md">&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code class="md">Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会被转换为：</p><pre><code class="md">&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code class="md">&lt;div class=&quot;footer&quot;&gt;  &amp;copy; 2004 Foo Corporation&lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code class="md">&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code class="md">* * *********- - ----------------------------------------</code></pre><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code class="md">This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code class="md">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code class="md">See my [About](/about/) page for details.</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code class="md">This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code class="md">This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code class="md">[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code class="md">[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &#39;Optional Title Here&#39;[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code class="md">[id]: &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code class="md">[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p><pre><code class="md">[link text][a][link text][A]</code></pre><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code class="md">[Google][]</code></pre><p>然后定义链接内容：</p><pre><code class="md">[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code class="md">Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接</p><pre><code class="md">[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code class="md">I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code class="md">I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code class="md">&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code class="md">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：</strong></em></p><pre><code class="md">*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code class="md">&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code class="md">un*frigging*believable</code></pre><p>但是<strong>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</strong></p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code class="md">\*this text is surrounded by literal asterisks\*</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p><pre><code class="md">Use the `printf()` function.</code></pre><p>会产生：</p><pre><code class="md">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code class="md">``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code class="md">&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code class="md">A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code class="md">&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code class="md">Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code class="md">&lt;p&gt;Please don&#39;t use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code class="md">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code class="md">&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：</p><pre><code class="md">![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code class="md">![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code class="md">[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：</em></p><pre><code class="md">\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code class="md">\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code class="md">&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code class="md">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code class="md">&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code class="md">&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">http://daringfireball.net/projects/markdown/</a></p><h2 id="Markdown-免费编辑器"><a href="#Markdown-免费编辑器" class="headerlink" title="Markdown 免费编辑器"></a>Markdown 免费编辑器</h2><p>Windows 平台</p><ul><li><a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></li><li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></li></ul><p>Linux 平台</p><ul><li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="noopener">ReText</a></li></ul><p>Mac 平台</p><ul><li><a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a></li></ul><p>在线编辑器</p><ul><li><a href="http://markable.in/" target="_blank" rel="noopener">Markable.in</a></li><li><a href="http://dillinger.io/" target="_blank" rel="noopener">Dillinger.io</a></li></ul><p>浏览器插件</p><ul><li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="noopener">MaDe</a> (Chrome)</li><li></li></ul><p>高级应用(Sublime Text 2 + MarkdownEditing 教程)</p><ul><li><a href="http://www.sublimetext.com/2" target="_blank" rel="noopener">Sublime Text 2</a></li><li><a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="noopener">MarkdownEditing</a></li><li><a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="noopener">教程</a></li></ul></pre></table></div></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu-apt</title>
      <link href="/2019/05/16/ubuntu-apt/"/>
      <url>/2019/05/16/ubuntu-apt/</url>
      
        <content type="html"><![CDATA[<p>debian apt常见用法</p><h1 id="apt-命令"><a href="#apt-命令" class="headerlink" title="apt 命令"></a>apt 命令</h1><p>在Ubuntu下，apt-get近乎是最常用的shell命令之一了，因为他是Ubuntu通过deb安装软件的常用工具命令。</p><p>下面列举常用的 apt命令</p><ul><li>apt-cache search package 搜索软件包</li><li>apt-cache show package  获取包的相关信息，如说明、大小、版本等</li><li><strong>sudo apt-get install package 安装包</strong></li><li>sudo apt-get install package –reinstall   重新安装包</li><li>sudo apt-get -f install   修复安装</li><li><strong>sudo apt-get remove package 删除包</strong></li><li>sudo apt-get remove package –purge 删除包，包括配置文件等</li><li><strong>sudo apt-get update  更新源</strong></li><li><strong>sudo apt-get upgrade 更新已安装的包</strong></li><li>sudo apt-get dist-upgrade 升级系统</li><li>apt-cache depends package 了解使用该包依赖那些包</li><li>apt-cache rdepends package 查看该包被哪些包依赖</li><li>sudo apt-get build-dep package 安装相关的编译环境</li><li><strong>apt-get source package  下载该包的源代码</strong></li><li>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</li><li>sudo apt-get check 检查是否有损坏的依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> apt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu-typora-install</title>
      <link href="/2019/05/16/ubuntu-typora-install/"/>
      <url>/2019/05/16/ubuntu-typora-install/</url>
      
        <content type="html"><![CDATA[<pre><code class="shell"># or run:# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAEwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -# add Typora&#39;s repositorysudo add-apt-repository &#39;deb https://typora.io/linux ./&#39;sudo apt-get update# install typorasudo apt-get install typora</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>huawei-compatible</title>
      <link href="/2019/05/14/huawei-compatible/"/>
      <url>/2019/05/14/huawei-compatible/</url>
      
        <content type="html"><![CDATA[<p>华为iot Agent lite 认证</p><h1 id="1-设备接入和删除"><a href="#1-设备接入和删除" class="headerlink" title="1. 设备接入和删除"></a><strong>1.</strong> <strong>设备接入和删除</strong></h1><h2 id="1-1-AgentLite-认证-接入和删除-001"><a href="#1-1-AgentLite-认证-接入和删除-001" class="headerlink" title="1.1 AgentLite_认证_接入和删除_001"></a>1.1 AgentLite_认证_接入和删除_001</h2><p> 测试方法：在平台上注册设备后，进行绑定操作，在平台上从离线变为在线状态</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果3的截图，离线在线状态图各一张，deviceid一致</td></tr></tbody></table><h2 id="1-2-AgentLite-认证-接入和删除-002"><a href="#1-2-AgentLite-认证-接入和删除-002" class="headerlink" title="1.2 AgentLite_认证_接入和删除_002"></a>1.2 AgentLite_认证_接入和删除_002</h2><p> 测试方法：将已在线的设备删除</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2，3的截图，平台上用deviceid查询此设备时结果为空</td></tr></tbody></table><h2 id="1-3-AgentLite-认证-接入和删除-003"><a href="#1-3-AgentLite-认证-接入和删除-003" class="headerlink" title="1.3 AgentLite_认证_接入和删除_003"></a>1.3 AgentLite_认证_接入和删除_003</h2><p>测试方法：设备在线后，下电离线后再删除</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>测试步骤2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2，3的截图，平台上用deviceid查询此设备时结果为空</td></tr></tbody></table><p># </p><h1 id="2-设备数据上报"><a href="#2-设备数据上报" class="headerlink" title="2 设备数据上报"></a><strong>2</strong> <strong>设备数据上报</strong></h1><h2 id="2-1-AgentLite-认证-数据上报-001"><a href="#2-1-AgentLite-认证-数据上报-001" class="headerlink" title="2.1 AgentLite_认证_数据上报_001"></a>2.1 AgentLite_认证_数据上报_001</h2><p>测试方法：设备电池供电，上报电量</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="2-2-AgentLite-认证-数据上报-002"><a href="#2-2-AgentLite-认证-数据上报-002" class="headerlink" title="2.2 AgentLite_认证_数据上报_002"></a>2.2 AgentLite_认证_数据上报_002</h2><p>测试方法： 电池供电，低电量时，上报低电量告警</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="2-3-AgentLite-认证-数据上报-003（可选）"><a href="#2-3-AgentLite-认证-数据上报-003（可选）" class="headerlink" title="2.3 AgentLite_认证_数据上报_003（可选）"></a>2.3 AgentLite_认证_数据上报_003（可选）</h2><p>测试方法： 绑定设备成功后，电量也上报到平台，非手动触发上报</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4的截图</td></tr></tbody></table><h2 id="2-4-AgentLite-认证-数据上报-004"><a href="#2-4-AgentLite-认证-数据上报-004" class="headerlink" title="2.4 AgentLite_认证_数据上报_004"></a>2.4 AgentLite_认证_数据上报_004</h2><p>测试方法： 设备触发基本数据上报，比如温度，湿度等。</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期截图结果2的</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2的截图</td></tr></tbody></table><h2 id="2-5-AgentLite-认证-数据上报-005"><a href="#2-5-AgentLite-认证-数据上报-005" class="headerlink" title="2.5 AgentLite_认证_数据上报_005"></a>2.5 AgentLite_认证_数据上报_005</h2><p>测试方法： 设备离线状态上报</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果2的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2的截图</td></tr></tbody></table><h1 id="3-初始化（可-选）"><a href="#3-初始化（可-选）" class="headerlink" title="3 初始化（可**选）**"></a><strong>3</strong> <strong>初始化（可**</strong>选）**</h1><h2 id="3-1-AgentLit-认证-初始化-001"><a href="#3-1-AgentLit-认证-初始化-001" class="headerlink" title="3.1 AgentLit_认证_初始化_001"></a>3.1 AgentLit_认证_初始化_001</h2><p>测试方法：初始化设备到出厂设置</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果截图</td></tr></tbody></table><h1 id="4-可靠性"><a href="#4-可靠性" class="headerlink" title="4 可靠性"></a><strong>4</strong> <strong>可靠性</strong></h1><h2 id="4-1-AgentLite-认证-可靠性-001"><a href="#4-1-AgentLite-认证-可靠性-001" class="headerlink" title="4.1 AgentLite_认证_可靠性_001"></a>4.1 AgentLite_认证_可靠性_001</h2><p>测试方法：电池供电，插拔传感器电池，10次</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果4截图，每次上线下线，上报数据的截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果4截图，每次上线下线，上报数据的截图</td></tr></tbody></table><h1 id="5-稳定性"><a href="#5-稳定性" class="headerlink" title="5 稳定性"></a><strong>5</strong> <strong>稳定性</strong></h1><h2 id="5-1-AgentLite-认证-稳定性-001（可选）"><a href="#5-1-AgentLite-认证-稳定性-001（可选）" class="headerlink" title="5.1 AgentLite_认证_稳定性_001（可选）"></a>5.1 AgentLite_认证_稳定性_001（可选）</h2><p>测试方法：传感器信号干扰测试</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果1截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果1截图</td></tr></tbody></table><h2 id="5-2-AgentLite-认证-稳定性-002"><a href="#5-2-AgentLite-认证-稳定性-002" class="headerlink" title="5.2 AgentLite_认证_稳定性_002"></a>5.2 AgentLite_认证_稳定性_002</h2><p>测试方法：设备运行72小时，不断电，稳定上报数据</p><p>测试数据：</p><table><thead><tr><th>应用平台（APPServer）截图</th><th>预期结果2截图</th></tr></thead><tbody><tr><td>平台截图</td><td>预期结果2截图</td></tr></tbody></table><h1 id="6-固件升级与回退（可-选）"><a href="#6-固件升级与回退（可-选）" class="headerlink" title="6 固件升级与回退（可**选）**"></a><strong>6</strong> <strong>固件升级与回退（可**</strong>选）**</h1><h2 id="6-1-AgentLite-认证-升级-001"><a href="#6-1-AgentLite-认证-升级-001" class="headerlink" title="6.1 AgentLite_认证_升级_001"></a>6.1 AgentLite_认证_升级_001</h2><p>测试方法：在平台上传升级包，创建升级任务，下发升级任务给设备。</p><p>测试数据：</p><table><thead><tr><th>平台截图</th><th>预期结果6，7，8，9截图</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h2 id="6-2-AgentLite-认证-回退-002"><a href="#6-2-AgentLite-认证-回退-002" class="headerlink" title="6.2 AgentLite_认证_回退_002"></a>6.2 AgentLite_认证_回退_002</h2><p>测试方法：在平台创建回退任务，下发回退任务给设备。</p><p>测试数据：</p><table><thead><tr><th>平台截图</th><th>预期结果6，7，8，9截图</th></tr></thead><tbody><tr><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> huawei-iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmmi-compnny</title>
      <link href="/2019/05/14/cmmi-compnny/"/>
      <url>/2019/05/14/cmmi-compnny/</url>
      
        <content type="html"><![CDATA[<p>国内做cmmi认证的公司</p><h2 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h2><ol><li>麦哲思科技(北京)有限公司</li><li>北京翰通融达管理咨询有限公司</li><li>北京国信普道科技有限公司</li><li>中质信安(北京)信息科技有限公司</li><li>北京昊诚亚旭科技有限公司</li></ol><h2 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h2><ol><li>深圳致卓信息技术有限公司</li></ol><h2 id="武汉"><a href="#武汉" class="headerlink" title="武汉"></a>武汉</h2><ol><li>武汉惟特信息技术有限公司</li></ol><h2 id="上海"><a href="#上海" class="headerlink" title="上海"></a>上海</h2><ol><li>上海科维安信息技术顾问有限公司</li><li>上海静脉信息科技有限公司</li></ol><h2 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h2><ol><li>广州赛宝认证中心服务有限公司</li></ol><h2 id="福州"><a href="#福州" class="headerlink" title="福州"></a>福州</h2><ol><li>百诺企管</li></ol>]]></content>
      
      
      <categories>
          
          <category> 认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmmi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmmi3</title>
      <link href="/2019/05/14/cmmi3/"/>
      <url>/2019/05/14/cmmi3/</url>
      
        <content type="html"><![CDATA[<p>cmmi3 认证介绍</p><h2 id="CMMI3证书是什么-CMMI认证"><a href="#CMMI3证书是什么-CMMI认证" class="headerlink" title="CMMI3证书是什么/CMMI认证"></a>CMMI3证书是什么/CMMI认证</h2><p>CMMI认证是由美国软件工程学会(software engineering institue,简称SEI)制定的一套专门针对软件产品的质量管理和质量保证标准. CMMI 的全称为：Capability Maturity Model Integration，即能力成熟度模型集成。<br>近年来，很多软件企业纷纷实施CMMI管理模式，不少企业如：东软，托普，华为等企业通过了三级或四级评估。这一方面反映了我国企业在进入WTO后的危机意识，以及与世界接轨的迫切愿望。另一方面则反映出我国软件企业在改进管理方法上所作的努力。但是CMMI到底能够为我们做什么呢？实际上这个问题对不同的人有不同的答案。对采购部门的人员来说，掌握了CMMI技术可以有目的地考察项目实施人员或公司的实施能力，从而保证所采购的项目能够顺利完成。对于项目经理来说，掌握CMMI技术能够提高自己的项目管理能力，从而能够使项目高质量，低成本，按期限地完成。对于企业老总来说，CMMI技术不仅能够提升企业的管理水平，还能够引入科学的管理理念，提升企业的整体管理水平。</p><h2 id="CMMI3的证书的周期和费用：-CMMI认证"><a href="#CMMI3的证书的周期和费用：-CMMI认证" class="headerlink" title="CMMI3的证书的周期和费用：/CMMI认证"></a>CMMI3的证书的周期和费用：/CMMI认证</h2><p>首先是费用问题，因为CMMI不像国内一些认证，花点钱，走个流程就可以<br>首先要给认证公司一笔前期的培训和辅导费用，一般来说在15W左右。然后最后的评估阶段，大概也需要15W左右，这个主要是付给主任评估师的费用，如果是老外还需要支付翻译的费用，很贵，老外一般一天至少1万多，最后初评和最终评估加起来估计要10来天。<br>CMMI的认证过程，一般需要前期培训、标准过程导入、几个项目实施标准过程、最后进行评估等几个阶段，正常点的话，半年到1年是至少需要的，这里我们来谈谈哪些过程可以缩短甚至跳过。</p><blockquote><ol><li>前期培训，这个是可以大幅度缩短的，让辅导老师过来花个2、3天讲课，突击培训一下，让大家了解CMMI的体系。 </li><li>标准化导入，这个也是可以缩短的，让认证公司提供一套模板，根据公司实际情况，安排人员突击完成，然后辅导老师提出意见，然后再修改，再审核，来回2、3次，算半个月时间好了。 </li><li>几个项目实施标准过程，这个就要看公司人力资源配合度了，首先让认证公司，提供一个项目完整的所有的材料模板，公司组织人员根据公司研发项目，安排4个（最少的要求了）对照模板进行编制（这里为了省时间，全部是编造，所以时间点一定要注意，省的后面麻烦），如果人力资源配备充足，那么4个项目，我想半个多月时间可以完成（4个项目全部弄完，文档起码有6000多个，工作量很大） </li><li>最后的评估阶段，要安排主任评估师的日程，因为最后需要一个初评和最终评估，按照要求，初评3天左右时间，中间隔1个星期给你进行修改，最终评估一般要7天，所以保守估计，评估阶段，也是需要半个多月。 </li><li>最后关键的来了，评估完成后，主任评估师，需要再SIE网站上，去整个评估过程，公司信息等进行注册，然后提交评估材料给SEI进行审核，等待SEI的最终评审，通过后，会在SEI网站上进行公布。这里要注意了，SEI本身是不给你发证的，这个证书是由认证公司给你发的，只是上面会写明你的评估通过时间和等级，以及主任评估师等信息，到底真实性如何，SEI的网站信息为准，所以，中间这段等待的时间，大概要1个月，就要算进去，只有SEI网站信息公布了，认证公司才可以给你发证。</li></ol></blockquote><h2 id="通过CMMI3级评估之后还需升级-CMMI认证"><a href="#通过CMMI3级评估之后还需升级-CMMI认证" class="headerlink" title="通过CMMI3级评估之后还需升级 /CMMI认证"></a>通过CMMI3级评估之后还需升级 /CMMI认证</h2><p>因为美国SEI对于CMMI各级别（2-5）以及模型的评估是有时限要求的（3年），而且伴随着CMMI以产品化方式发布地进行（主要是模型与评估方法的升级），所以从企业CMMI证书与ATM人员资格两方面都需要进行CMMI升级或CMMI复评。<br>CMMI升级作为企业研发过程管理能力提升的一项里程碑活动，其作为从CMMI3级的组织级研发过程管理状态程度提升到以cmmi4级量化数据管理（或CMMI5级持续化自主过程改进）的状态程度，是企业“内功”沉淀的优化方式与途径。</p><h2 id="公司下面的某一个部门实施CMMI认证：-CMMI认证"><a href="#公司下面的某一个部门实施CMMI认证：-CMMI认证" class="headerlink" title="公司下面的某一个部门实施CMMI认证：/CMMI认证"></a>公司下面的某一个部门实施CMMI认证：/CMMI认证</h2><p>我们可不可以只在公司下面的某一个部门实施CMMI，以便减少实施的难度？<br>A：可以，因为CMMI 中反复使用的是“组织”一词，它既可以代表一家完整的公司，也可以代表一家公司下面的一个或多个部门。因此，即使在评估CMMI 5 级的时候，也可以只对某家公司的某一个部门进行。CMMI 2级是面向项目级别的，实施的时候这方面灵活性更大。不过在主任评估师向SEI 提交评估结果时会明确写明评估的时候是在企业的什么范围内进行的（多少个部门纳入了评估的范围，大约参与的软件开发人员和管理人员的数量等）。现在很多企业向媒体宣传的时候，有意无意的掩盖了这一点，只是泛泛地说：XXX 公司已经达到了CMMI 2 级的要求，久而久之造成了很多错误的认识。不过，如果企业希望通过过 程改进真正获益的话，最好还是能够在整个企业中所有与软件活动有关的的部门都实施过程改进。虽然2 级是面向项目级别的，但我们非常欢迎和支持在整个公司的范围内实施CMMI 2级，无论这些部门的软件项目是开发类的、实施或维护类的，也不论这些项目是面向客户的工程类的、还是面向市场的产品类的。这样，公司积累大量不同类型项目的宝贵经验，在将来向3 级迈进的时候，充分利用这些经验可以把3 级的实施落在实处，得到更加广泛的认同。我个人认为，如果一家公司希望能够成为CMMI 3 级的公司的话，如果在2 级的阶段投入比较多，实施的效果比较好，那么3 级的实施难度会下降很多；反之，如果2 级阶段投入较少，实施范围小、效果不是很好的话，3 级的实施难度会增加；因此可以说，一个公司在从1 级到3 级这个过程中所投入的资源（人员、时间、资金等）总数基本上是一个固定值。既然如此，为什么不早一点把工作做到实处，早一点获得成效呢？</p><h2 id="不同国籍的CMMI主任评估师资质：-CMMI认证"><a href="#不同国籍的CMMI主任评估师资质：-CMMI认证" class="headerlink" title="不同国籍的CMMI主任评估师资质：/CMMI认证"></a>不同国籍的CMMI主任评估师资质：/CMMI认证</h2><p>A：据不完全统计，目前在全球范围内SEI 授权的主任评估师有300 多位，不过不同的CMMI主任评估师在资质上面并不是全都相同。这要从如何成为主任评估师说起：如果要成为主任评估师，除了自身要有相当丰富的软件工程、项目管理等相关知识背景外，还要参加大量的SEI 组织的CMMI 相关知识的官方培训。在正式成为主任评估师以前，必须亲自主持一次正式评估工作，由已经得到授权资格的主任评估师进行考察，如果这次评估工作经过考察没有出现严重的问题和错误，SEI 将颁发主任评估师的授权认证。这样的证书在2 年内是有效的，有效期内主任评估师可以主持正式评估，其结果SEI 认可，也可以监控其他主任评估师候选人主持正式评估的工作。本来这样的做法可以使成为主任评估师的“门槛”很高，但是还是存在一定的漏洞：如果一个人有个好朋友是主任评估师，他也想成为主任评估师，而他的朋友又不能很好的坚守原则，这样就很容易“混入”主任评估师的队伍。另外，目前很多主任评估师在给客户作评估之前，往往还提供一些相关的咨询服务，这种“既当教练又当裁判”的情况也难免会使一些主任评估师在作评估的时候放松尺度，使得进行过程改进的企业所有的过程改进工作变成了“花钱买认证”，而没有真正从中获益。基于上述情况，目前国内一些比较有实力的咨询公司为了保证自己的服务质量，也为了能使国内的软件企业在进行基于CMMI 的过程改进的时候达到真正的效果，在主任评估师的选择上坚持高标准和严要求。他们去请在欧美国家知名度很高、信誉很好的主任评估师来国内主持正式评估工作。这些主任评估师中很多都是SEI 首批授权的主任评估师，有些人甚至就是参与制定CMMI 的人员。这些主任评估师经验丰富，对于CMMI 的理解非常深刻，而且坚持原则，虽然这对国内的企业来说实施难度也增加了一些，但能够在这样的要求下达到CMMI2级以上的评价才是货真价实的。还有一点，目前很多国内的软件企业也希望和印度的软件企业一样，通过实施CMMI 提高自身过程的能力成熟度，以便在海外市场上获得更多的外包订单。这个时候不同的主任评估师也会产生不同的效果。比如，当一家国内的软件企业在和一家美国的企业洽谈外包业务时，告知对方我们已经于某个时间达到了CMMI2级以上的成熟度，对方很可能要了解是由哪位主任评估师来做的评估，如果对方在美国知名度很高，对方可能对这家企业“刮目相看”，后面的洽谈可能就会容易很多。这就像在日常生活中，同样是硕士学位，但知名度高的导师带出来了学生更容易被人接受是一样的道理。</p><h2 id="咨询公司对实施CMMI-有什么帮助-CMMI认证"><a href="#咨询公司对实施CMMI-有什么帮助-CMMI认证" class="headerlink" title="咨询公司对实施CMMI 有什么帮助 /CMMI认证"></a>咨询公司对实施CMMI 有什么帮助 /CMMI认证</h2><p>A：目前有不少的软件企业希望通过自身的努力进行过程改进，然后进行正式评估，这是很常见的一种做法。不过，如果希望在实施 的过程中困难少一点儿，时间短一点儿的话，最好还是与经验丰富的咨询公司合作。主要的原因在于：★ CMMI 作为一个模型，具有高度的抽象性。因此CMMI 中并没有提出一家软件组织必须如何去做才算是达到了要求，它提出的只是 “做什么”。举个日常生活中的例子来说，CMMI 提出的要求就好像一家公司要求地面要保持清洁，至于是用扫把扫还是用吸尘器吸 并不重要。同样对于CMMI 中的要求，可以有很多种不同的实践来满足。可是，到底什么实践在自己的企业中实施起来既比较有效， 还能达到CMMI的要求，对于刚开始实施CMMI 的软件企业来说，这种判断和选择是很难把握的。而经验丰富的咨询公司结合了大量国 内软件公司的实践、业内的最佳实践以及主任评估师推荐的实践，帮助企业达到CMMI 的要求，而且还比较简单易行，实施效果已经 经过了很多次的证明，自然能够达到“事半功倍”的效果。★ 咨询公司对于企业在实施过程中出现的问题经验丰富，可以有效的减少做错事情的可能性。比如高层经理对过程改进不够重视或 者有一些误解，特别是资源方面的问题，咨询公司都可以及时发现，并协助参与实施的人员减少随之带来的负面影响。★ 如果有些企业希望在一个既定的时间目标下达到某个成熟度级别，咨询公司可以帮助实施企业监控进度，对于发现进度落后的情 况，根据咨询师的经验也可以及时发现，及时采取纠正措施跟上进度。★ 如果企业自己实施CMMI，还需要自己联系主任评估师，这样在费用上可能会开销很大，咨询公司如果提供评估服务，他们可以根 据企业的需求（包括资质和成本等多方面）帮助企业联系到合适的主任评估师，减少了企业自己联系的麻烦和额外的成本。</p><h2 id="CMMI评估的预备工作都有哪些-CMMI认证"><a href="#CMMI评估的预备工作都有哪些-CMMI认证" class="headerlink" title="CMMI评估的预备工作都有哪些 /CMMI认证"></a>CMMI评估的预备工作都有哪些 /CMMI认证</h2><p>评估实践证明：在进行CMMI评估之前，制定一个正确的评估计划并将其文档化，确保有一个富有经验的、受过培训且具有适当资格的小组能被用来评估，为执行评估过程做准备，是十分必要的。</p><p>我们所说的文档化评估计划的结果，包括：要求，协定，估价，风险，剪裁方法，以及与评估相关的实际考虑（例如：日程安排，后勤，组织的背景信息）。此外，还应当获取并记录发起方对于评估计划的正式批准。在制定评估计划之前，应对评估输入中反映出来的协议文档化，该协议将有助于评估目标和关键评估计划参数的共同理解。在对驱动计划过程的关键参数达成共同理解的基础上，评估发起方和scampi主任评估师应就评估计划达成一致；发起者和评估小组领导应就已计划的评估中技术和非技术细节达成一致。这个计划在执行其他的计划和准备阶段活动中需要进一步细化。<br>而通过评估小组的准备工作，将产生一支富有经验的、受过培训的且定位准确的小组准备执行评估任务。该小组的成员都应当获得了完成他们各自的任务所必备的知识，或者他们之前所拥有的知识被证实足以完成相关任务。评估小组领导者已经给每一个人提供了为完成他们各自的任务所需的对技能进行实践的机会，或者证实这些技能在过去已经得到了示范。小组成员相互了解，同时开始计划他们如何协调一致的工作。还应该做到：准备好的小组是为评估目标而服务的，小组的成员已提供培训且培训结果被记录，在必要的时候，对他们所做的因知识或技能不足的补救工作已经完成。我们认为，无论评估小组领导者是从头培训一支全新的评估小组，还是通过从富有经验的小组成员中选择来组建一个小组，确保他们与评估小组领导者能组成一个成功的集体是其责任。<br>为便于说明我们的观点，下面按照实际操作的顺序列出了与CMMI评估相关的预备工作。 </p><h3 id="一-进行恰当的剪裁"><a href="#一-进行恰当的剪裁" class="headerlink" title="一.进行恰当的剪裁"></a>一.进行恰当的剪裁</h3><p>由于SCAMPI是设计用于满足大范围的评估应用，所以剪裁是一个值得仔细的全程关注的活动。SCAMPI的剪裁方法包括：对所要求实践中的机会进行选择，设置参数和限制评估过程中可以改变的参数，以及包含可选实践。<br>在剪裁过程中，需要注意： </p><ol><li>在每一个活动的必需实践中评估和选择裁剪部分； </li><li>当预期变更发生时，在可接受的界限内评估和设置参数； </li><li>评估和选择适当的任意实践； </li><li>确保裁剪的结果是首尾一致的，并且根据评估目标和约束是恰当的； </li><li>生成裁剪结果文档。 </li></ol><p>MDD的结构阐明了SCAMPI具有的特征，要么被看作ARC需求的一个直接派生，要么被看作SCAMPI需求。参数和限制区在这些方法需求内详细说明了可承认的变更。裁剪向导和执行向导被用来帮助调整方法以适应评估发起者目标和评估约束。裁剪方法和执行部分必须在某种程度上保证没有违背SCAMPI的必需实践。 </p><h3 id="二-对评估所需要的资源进行标识"><a href="#二-对评估所需要的资源进行标识" class="headerlink" title="二.对评估所需要的资源进行标识"></a>二.对评估所需要的资源进行标识</h3><p>本活动是与执行评估所需资源的鉴定和评估相关的。评估所需的资源包括人员、设备、工具以及有权使用的信息。具体的行为有： </p><ol><li>确定评估组成员； </li><li>确定评估参与者； </li><li>确定设备和工具； </li><li>确定所需的其他评估资源； </li><li>文档化在评估计划中的资源决议。 </li></ol><p>此外，在鉴定过程中所需资源的详细程度必须足够支持评估计划的实施。例如，确定评估组的领导人，参与接见的候选人姓名和拥有评估组成员资格者的姓名，这些人在组织上和项目上的从属关系，被评估组使用的地点、座位容量和房屋外形，所需要的特殊设备(如：高摄投影仪、膝上形电脑放映机、视频会议)。 </p><h3 id="三-确定评估所需的费用以及日程安排"><a href="#三-确定评估所需的费用以及日程安排" class="headerlink" title="三.确定评估所需的费用以及日程安排"></a>三.确定评估所需的费用以及日程安排</h3><p>本活动是在评估计划中包含并列出最高费用的明细表以及进度表。具体的行为包括： </p><ol><li>估计关键事件持续时间，并以此作为制订全面进度表的基础； </li><li>估计参与评估的人员所需的努力； </li><li>恰当地估计使用工具和设备的相关费用； </li><li>适当地估计伴随事件的费用(如：出差、住宿、吃饭)； </li><li>在评估计划中文档化详细的估计进度； </li><li>在评估计划中文档化详细的估计费用。 </li></ol><p>评估成果的取得不仅取决于评估组，还取决于整个组织单位内的预期参与者(如：被访问者、管理设备的相应人员、简报的出席者、支持者)。因此，我们必须对评估过程的每一天进行计划。 </p><h3 id="四-对后勤计划进行管理"><a href="#四-对后勤计划进行管理" class="headerlink" title="四.对后勤计划进行管理"></a>四.对后勤计划进行管理</h3><p>本活动强调评估过程中的每一个相应部分的后勤保障细节应该在协商后取得一致并文档化。评估组领导要取得组织单位协调者的支持，对文档中的计划任务进行管理并与后勤保障计划进行协调。检查制度和行动条款跟踪机制是用于管理这些任务非常有用的组织结构。具体的行为包括： </p><ol><li>文档化后勤保障计划，增强其可靠性； </li><li>保持与供应状况的沟通渠道； </li><li>指定跟踪后勤保障问题的职责。 </li></ol><p>我们知道，有效的计划取决于对评估中可能发生的后勤保障问题变更的预见性。这些有时被忽略的问题包括： </p><ol><li>确定在评估中所住的旅馆； </li><li>提供工作站支持； </li><li>对吃饭进行管理； </li><li>在某个时刻设备的相互影响； </li><li>会议的安全/分级需求； </li><li>为得到的有限设备的护送提供证章或者管理。 </li></ol><h3 id="五-对风险进行管理并将其文档化"><a href="#五-对风险进行管理并将其文档化" class="headerlink" title="五.对风险进行管理并将其文档化"></a>五.对风险进行管理并将其文档化</h3><p>由于任何项目都取决于事件、人物和其他资源，风险管理是其成功的一个重要因素。评估组领导有责任在发起者和评估组成员之间沟通风险和相关的减缓风险计划，并生成文档。具体的行为包括： </p><ol><li>确定评估风险； </li><li>对评估过程中的关键风险提出减缓计划并在必要时执行这些计划； </li><li>记录风险评估发起者和其他风险产生者在风险评估中的地位。 </li></ol><p>通过对活动的管理而确定的风险因素及减缓计划是评估计划的必需元素。在评估计划中大部分领导评估者应当拥有风险管理的头衔，专注于风险管理活动的努力水平是评估组领导必需调整以适应即将到来的情况所需要的。 </p><h3 id="六-获得评估计划的许可"><a href="#六-获得评估计划的许可" class="headerlink" title="六.获得评估计划的许可"></a>六.获得评估计划的许可</h3><p>评估计划应获取正式发起者的许诺。由于这个协议的正式性是如此至关重要，评估计划需要在评估发起者和评估组领导之间签订一个合同。具体的行为包括： </p><ol><li>文档化评估计划； </li><li>和评估发起者一起重新审查评估计划，并获得发起者的正式批准； </li><li>为相关的风险产生者提供评估计划以便重新审查。 </li></ol><p>评估计划的必需内容至少包括如下几项： </p><ol><li>评估输入； </li><li>在风险管理中所执行的活动； </li><li>风险管理所需的资源； </li><li>用于完成评估所需的费用和进度估计； </li><li>评估的后勤保障； </li><li>与实施评估相关的风险因素和减缓计划； </li><li>如果评估发起者要求满足ISO/IEC 15504需求时的检验标准。 </li></ol><p>此外，我们必须为评估组领导和发起者提供一个签名区，以指出他们在评估计划中各自所承担的义务。当然，如果评估计划还有其他次要的补充资料，并无须重新签名，除非一个或更多的评估输入元素被更改。至少，评估组成员应考虑过相关的风险产生者，并应得到一个获得批准的评估计划的复件。 </p><h3 id="七-选择评估小组领导"><a href="#七-选择评估小组领导" class="headerlink" title="七.选择评估小组领导"></a>七.选择评估小组领导</h3><p>评估发起者有责任选择一个评估小组的领导者，这个人应该拥有足够的经验、知识、技术来负责和领导评估活动。一个评估小组领导者必须是由SEI评估程序授权的SCAMPI主任评估师，同时必须以良好的状态作为评估过程的一名成员。在SEI网站上有SEI评估程序的详细描述。评估小组领导者有责任保证评估是根据SCAMPI的要求进行的，所做的裁剪必须满足在该方法定义下的允许范围内的评估目标和约束。具体的行为包括： </p><ol><li>选择一个经SCAMPI授权的主任评估师担任评估小组领导者； </li><li>检验评估小组领导者的资格(经验、知识和技术)。 </li></ol><p>评估小组领导者必须是一名状态良好的经SEI授权的SCAMPI主任评估师。这一要求必须通过网络或与SEI CMMI办事机构直接联系得到确认。在任何已进行的评估中只能有唯一一名正式的评估小组领导者。他是唯一能判断给评估小组成员委派何种重要任务的人，但是他不能赋予其成员有关评估活动是否成功完成的领导职责和最终职责。特定评估小组中多重领导评估者对该评估小组的领导具有很重要的作用。但是，唯一指定的评估小组领导者必须履行其领导和管理评估过程的职责。 </p><h3 id="八-选择评估小组成员"><a href="#八-选择评估小组成员" class="headerlink" title="八.选择评估小组成员"></a>八.选择评估小组成员</h3><p>本活动包括识别有用的职员、评定其资格和从中挑选人员作为评估小组成员。它可以发生在评估发起者作出管理评估活动的许诺之后，并能为评估计划保证提供输入。具体的行为包括： </p><blockquote><ol><li>保证评估小组成员满足个人的最低标准； </li><li>保证评估小组作为一个整体满足的最低标准； </li><li>文档化在评估输入中小组成员的职责和资格。 </li></ol></blockquote><p>SCAMPI评估可接受的评估小组最小规模是4个成员(包括小组领导者)。推荐的最大规模是9个成员。所有小组成员之前必须完成获得SEI推荐的并由SEI认可的权威授课者所教授的CMMI课程。小组成员必须接受有关评估方法的培训。关于工程领域的经验，评估小组(作为一个整体)平均至少要有6年以上的经验，且小组总的经验要不少于25年，这些规定都隐藏在评估活动中。关于管理经验，评估小组(作为一个整体)总的经验不能少于10年，且至少有1名成员拥有6年以上的管理经验。<br>总的来说，评估小组应该在评估组织内部所使用的生命周期里具有有代表性的经验。在任何特定的生命周期阶段，评估小组至少应有两名成员具有从事这方面工作的经验。此外，必须保证，小组成员不应该成为任何特定项目的管理者或者成为任何预定被访问者的直接管理链中的一个。 </p><h3 id="九-准备评估小组"><a href="#九-准备评估小组" class="headerlink" title="九.准备评估小组"></a>九.准备评估小组</h3><p>评估小组领导者有责任确保评估小组成员为执行计划的评估活动完成充分的准备。这包括熟悉在评估过程中将使用的参考模型、SCAMPI、评估计划、组织数据和特征、工具和技术以及为评估任务分配任务和职责。小组建立练习通常被用来实践简单的技能和在理解小组目标及如何取得满意上达成一致。所有的小组成员被要求遵守严格规则以保证机密性、保护所有者或敏感数据以及项目参与者未知的信息。私下陈述通常被用来达成这些谅解。具体的行为包括： </p><blockquote><ol><li>保证评估小组成员已接受参考模型培训； </li><li>为评估小组成员提供评估方法培训或确保他们已掌握此方法； </li><li>为评估小组和小组规范的建立提供服务； </li><li>为评估小组成员提供关于评估目标、计划和他们自身分配的职责和任务的定位。 </li></ol></blockquote><p>模型培训必须利用CMMI课程的权威标准来提供，并由CMMI办事机构权威认证的授课者讲授。方法培训可能通过下面两种方法之一进行： </p><blockquote><ol><li>针对即将到来的评估作明确性的方法培训； </li><li>对大量的目前并没有从事任何评估工作的潜在的小组成员进行方法培训。 </li></ol></blockquote><p>对一个完全重新组建的小组进行方法培训至少持续两天，且必须强调那些小组成员在评估过程很可能遇到的情况。本培训在SCAMPI的应用中没有必要包含所有的变量。针对潜在的将来的小组成员所进行的团体式方法培训必须包含方法上剪裁部分的所有内容和允许的变更以应付一系列在将来的评估中他们很可能会遇到的情况。SEI评估程序为那些目前不是评估小组成员的人们所得到的培训指定了额外的要求。那些在以前的评估小组中作为成员已接受过培训的小组成员，如果并没有进行目前的方法培训，那么他们并不自动地具有参加当前评估的资格。在这样的案例中，评估小组领导者要求了解以前的培训的本质和为即将到来的评估开展的培训足够多的内容。这需要对以前的评估和计划的评估进行比较。例如，假如小组成员使用连续表示法参与了一个仅集中在软件工程领域的评估，而计划的评估是使用阶段表示法集中在SE/SW/IPPD领域，那么该小组成员需要许多重要的新概念来覆盖。作为一个整体，评估小组至少产生一个结果来说明如何为即将到来的评估展开工作，建立小组规范和操作决议的目的。 </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面，我们按照评估过程中实际操作的顺序列出了与CMMI评估相关的预备工作。此外，在对CMMI评估进行的预备工作的过程中，我们还应当对模型剪裁的原则有所了解： </p><blockquote><ol><li>在某些应用中，计划模板和例行的程序能够根据评估的需要进行调整，这和当地的过程所有权一样，有助于交流； </li><li>一个结构化的计划工艺组有利于只有有限的评估经验的组织，这样一个工艺就像缓和策略样，对于发现风险是一个很有价值的机会； </li><li>案例研究材料提供了各种各样的选择来扩充小组培训内容以增强那些更需要培训的重点； </li><li>富有经验的评估小组领导者在没有案例分析的情况下，同样可以管理和模拟评估行为； </li><li>在小组所有已获得培训成员的集合中，对小组的建立工作进行管理以确保其团队凝聚力是十分重要的，因此，很多的小组建立练习是可以利用的，小组的规模、技能、组成部分都是本方法的裁剪内容； </li><li>所采用工具可以包括评估计划模板，样例，和计划模板中嵌入式的程序上的帮助，此外，为了估计评估约束的影响，估算工作表和方法也是很有用处的。 </li></ol></blockquote><p> 总之，CMMI评估是一个十分复杂的过程，更由于其具有的不确定性，在评估的实践中，一定要做到有备无患。真理来自于实践，我们相信，随着越来越多的软件组织着手CMMI评估，越来越多的成功经验将为我们所利用和借鉴。</p>]]></content>
      
      
      <categories>
          
          <category> 认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmmi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 使用国内源</title>
      <link href="/2019/04/30/npm-to-ali-source/"/>
      <url>/2019/04/30/npm-to-ali-source/</url>
      
        <content type="html"><![CDATA[<p>切换npm使用的源地址</p><h2 id="Node-的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。"><a href="#Node-的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。" class="headerlink" title="Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。"></a>Node 的官方模块仓库网速太慢，模块仓库需要切换到阿里的源。</h2><p>不安装 cnpm 只用淘宝镜像，设置 npm 的镜像：<br>$ npm config set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org/</a><br>执行下面的命令，确认是否切换成功。<br>$ npm config get registry</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app-reset-design</title>
      <link href="/2019/04/25/app-rest-desig/"/>
      <url>/2019/04/25/app-rest-desig/</url>
      
        <content type="html"><![CDATA[<p>定义apiResultFull api</p><h1 id="根据resetfull-API-规范定义一个自己的-api规范"><a href="#根据resetfull-API-规范定义一个自己的-api规范" class="headerlink" title="根据resetfull API 规范定义一个自己的 api规范"></a>根据resetfull API 规范定义一个自己的 api规范</h1><p>定义格式如下</p><blockquote><p>/app/userid/resname<br>GET    查询<br>POST   新增<br>PUT    修改<br>DELETE 删除</p></blockquote><p>所有请求使用http中请求类型表示其目的<br>url只定义资源的路径<br>包含一下几个动作类型<br>资源服务器提供登录验证<br>资源服务器提供版本支持和不同格式的请求<br>第一个版本只提供json的格式请求</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-method-definitions</title>
      <link href="/2019/04/25/http-method-definitions/"/>
      <url>/2019/04/25/http-method-definitions/</url>
      
        <content type="html"><![CDATA[<p>介绍http中method的定义</p><h1 id="Method-Definitions"><a href="#Method-Definitions" class="headerlink" title="Method Definitions"></a>Method Definitions</h1><p>The set of common methods for HTTP/1.1 is defined below. Although this set can be expanded, additional methods cannot be assumed to share the same semantics for separately extended clients and servers.</p><p>The Host request-header field (section 14.23) MUST accompany all HTTP/1.1 requests.</p><p>9.1 Safe and Idempotent Methods<br>9.1.1 Safe Methods<br>Implementors should be aware that the software represents the user in their interactions over the Internet, and should be careful to allow the user to be aware of any actions they might take which may have an unexpected significance to themselves or others.</p><p>In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered “safe”. This allows user agents to represent other methods, such as POST, PUT and DELETE, in a special way, so that the user is made aware of the fact that a possibly unsafe action is being requested.</p><p>Naturally, it is not possible to ensure that the server does not generate side-effects as a result of performing a GET request; in fact, some dynamic resources consider that a feature. The important distinction here is that the user did not request the side-effects, so therefore cannot be held accountable for them.</p><p>9.1.2 Idempotent Methods<br>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property. Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.</p><p>However, it is possible that a sequence of several requests is non- idempotent, even if all of the methods executed in that sequence are idempotent. (A sequence is idempotent if a single execution of the entire sequence always yields a result that is not changed by a reexecution of all, or part, of that sequence.) For example, a sequence is non-idempotent if its result depends on a value that is later modified in the same sequence.</p><p>A sequence that never has side effects is idempotent, by definition (provided that no concurrent operations are being executed on the same set of resources).</p><p>9.2 OPTIONS<br>The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.</p><p>Responses to this method are not cacheable.</p><p>If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or Transfer-Encoding), then the media type MUST be indicated by a Content-Type field. Although this specification does not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more detailed queries on the server. A server that does not support such an extension MAY discard the request body.</p><p>If the Request-URI is an asterisk (“<em>“), the OPTIONS request is intended to apply to the server in general rather than to a specific resource. Since a server’s communication options typically depend on the resource, the “</em>“ request is only useful as a “ping” or “no-op” type of method; it does nothing beyond allowing the client to test the capabilities of the server. For example, this can be used to test a proxy for HTTP/1.1 compliance (or lack thereof).</p><p>If the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are available when communicating with that resource.</p><p>A 200 response SHOULD include any header fields that indicate optional features implemented by the server and applicable to that resource (e.g., Allow), possibly including extensions not defined by this specification. The response body, if any, SHOULD also include information about the communication options. The format for such a</p><p>body is not defined by this specification, but might be defined by future extensions to HTTP. Content negotiation MAY be used to select the appropriate response format. If no response body is included, the response MUST include a Content-Length field with a field-value of “0”.</p><p>The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain. When a proxy receives an OPTIONS request on an absoluteURI for which request forwarding is permitted, the proxy MUST check for a Max-Forwards field. If the Max-Forwards field-value is zero (“0”), the proxy MUST NOT forward the message; instead, the proxy SHOULD respond with its own communication options. If the Max-Forwards field-value is an integer greater than zero, the proxy MUST decrement the field-value when it forwards the request. If no Max-Forwards field is present in the request, then the forwarded request MUST NOT include a Max-Forwards field.</p><p>9.3 GET<br>The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI. If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.</p><p>The semantics of the GET method change to a “conditional GET” if the request message includes an If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. A conditional GET method requests that the entity be transferred only under the circumstances described by the conditional header field(s). The conditional GET method is intended to reduce unnecessary network usage by allowing cached entities to be refreshed without requiring multiple requests or transferring data already held by the client.</p><p>The semantics of the GET method change to a “partial GET” if the request message includes a Range header field. A partial GET requests that only part of the entity be transferred, as described in section 14.35. The partial GET method is intended to reduce unnecessary network usage by allowing partially-retrieved entities to be completed without transferring data already held by the client.</p><p>The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching described in section 13.</p><p>See section 15.1.3 for security considerations when used for forms.</p><p>9.4 HEAD<br>The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information sent in response to a GET request. This method can be used for obtaining metainformation about the entity implied by the request without transferring the entity-body itself. This method is often used for testing hypertext links for validity, accessibility, and recent modification.</p><p>The response to a HEAD request MAY be cacheable in the sense that the information contained in the response MAY be used to update a previously cached entity from that resource. If the new field values indicate that the cached entity differs from the current entity (as would be indicated by a change in Content-Length, Content-MD5, ETag or Last-Modified), then the cache MUST treat the cache entry as stale.</p><p>9.5 POST<br>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a uniform method to cover the following functions:</p><pre><code>  - Annotation of existing resources;  - Posting a message to a bulletin board, newsgroup, mailing list,    or similar group of articles;  - Providing a block of data, such as the result of submitting a    form, to a data-handling process;  - Extending a database through an append operation.</code></pre><p>The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database.</p><p>The action performed by the POST method might not result in a resource that can be identified by a URI. In this case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response includes an entity that describes the result.</p><p>If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).</p><p>Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.</p><p>POST requests MUST obey the message transmission requirements set out in section 8.2.</p><p>See section 15.1.3 for security considerations.</p><p>9.6 PUT<br>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI. If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request. If the resource could not be created or modified with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity MUST NOT ignore any Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return a 501 (Not Implemented) response in such cases.</p><p>If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</p><p>The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request – the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource. If the server desires that the request be applied to a different URI,</p><p>it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether or not to redirect the request.</p><p>A single resource MAY be identified by many different URIs. For example, an article might have a URI for identifying “the current version” which is separate from the URI identifying each particular version. In this case, a PUT request on a general URI might result in several other URIs being defined by the origin server.</p><p>HTTP/1.1 does not define how a PUT method affects the state of an origin server.</p><p>PUT requests MUST obey the message transmission requirements set out in section 8.2.</p><p>Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied to the resource created or modified by the PUT.</p><p>9.7 DELETE<br>The DELETE method requests that the origin server delete the resource identified by the Request-URI. This method MAY be overridden by human intervention (or other means) on the origin server. The client cannot be guaranteed that the operation has been carried out, even if the status code returned from the origin server indicates that the action has been completed successfully. However, the server SHOULD NOT indicate success unless, at the time the response is given, it intends to delete the resource or move it to an inaccessible location.</p><p>A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202 (Accepted) if the action has not yet been enacted, or 204 (No Content) if the action has been enacted but the response does not include an entity.</p><p>If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</p><p>9.8 TRACE<br>The TRACE method is used to invoke a remote, application-layer loop- back of the request message. The final recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK) response. The final recipient is either the</p><p>origin server or the first proxy or gateway to receive a Max-Forwards value of zero (0) in the request (see section 14.31). A TRACE request MUST NOT include an entity.</p><p>TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information. The value of the Via header field (section 14.45) is of particular interest, since it acts as a trace of the request chain. Use of the Max-Forwards header field allows the client to limit the length of the request chain, which is useful for testing a chain of proxies forwarding messages in an infinite loop.</p><p>If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a Content-Type of “message/http”. Responses to this method MUST NOT be cached.</p><p>9.9 CONNECT<br>This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a tunnel (e.g. SSL tunneling [44]).</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restify </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-restify</title>
      <link href="/2019/04/25/node-restify/"/>
      <url>/2019/04/25/node-restify/</url>
      
        <content type="html"><![CDATA[<p>A Node.js web service framework optimized for building semantically correct RESTful web services ready for production use at scale. restify optimizes for introspection and performance, and is used in some of the largest Node.js deployments on Earth.</p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restify </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android-build</title>
      <link href="/2019/04/25/android-build/"/>
      <url>/2019/04/25/android-build/</url>
      
        <content type="html"><![CDATA[<p>示例Android Build类</p><h4 id="Android-Build类"><a href="#Android-Build类" class="headerlink" title="Android Build类"></a>Android Build类</h4><blockquote><p>Build类提供了硬件厂商、编号、序列号、SDK版本等重要信息。<br>类名：android.os.Build</p></blockquote><table><thead><tr><th><strong>常量名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>BOARD</td><td>底层板名称</td></tr><tr><td>BOOTLOADER</td><td>Bootloader版本号</td></tr><tr><td>BRAND</td><td>品牌</td></tr><tr><td>CPU_ABI</td><td>CPU指令集</td></tr><tr><td>CPU_ABI2</td><td>CPU第二指令集</td></tr><tr><td>DEVICE</td><td>工业设计名称</td></tr><tr><td>DISPLAY</td><td>显示给用户的构建ID字符串</td></tr><tr><td>FINGERPRINT</td><td>构建的唯一标识符</td></tr><tr><td>HARDWARE</td><td>硬件的名称 比如高通</td></tr><tr><td>HOST</td><td>主机</td></tr><tr><td>ID</td><td>ID标签</td></tr><tr><td>MANUFACTURER</td><td>产品生产商</td></tr><tr><td>MODEL</td><td>手机型号</td></tr><tr><td>PRODUCT</td><td>产品名称</td></tr><tr><td>RADIO</td><td>无线电固件版本号</td></tr><tr><td>SERIAL</td><td>硬件序列号（如果可用）</td></tr><tr><td>TAGS</td><td>逗号分隔标签描述构建，如”调试”</td></tr><tr><td>TIME</td><td>出场时间</td></tr><tr><td>TYPE</td><td>构建类型</td></tr><tr><td>USER</td><td>构建用户名称</td></tr></tbody></table><p>2.Build.VERSION类</p><blockquote><p>Build.VERSION类提供了开发代号、内部版本、SDK版本等信息<br>类名：android.os.Build.VEISION</p></blockquote><table><thead><tr><th><strong>常量名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>CODENAME</td><td>当前的开发代号</td></tr><tr><td>INCREMENTAL</td><td>使用的内部值表示这个构建底层的源代码控制</td></tr><tr><td>RELEASE</td><td>用户可见版本字符串</td></tr><tr><td>SDK_INT</td><td>用户可见的SDK版本的框架</td></tr></tbody></table><p>3.Build.VERSION_CODES类</p><blockquote><p>android.os.Build.VERSION_CODES枚举当前已知的SDK版本代号</p></blockquote><table><thead><tr><th><strong>常量名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>BASE</td><td>2008-10：第一个版本的android</td></tr><tr><td>BASE_1_1</td><td>2009-02：第一个安卓更新，官方称为1.1</td></tr><tr><td>CUPCAKE</td><td>2009-05：android1.5</td></tr><tr><td>CUR_DEVELOPMENT</td><td>发展过程中构建的版本，但是未正式发布</td></tr><tr><td>DONUT</td><td>2009-09：android1.6</td></tr><tr><td>ECLAIR</td><td>2009-11：android2.0</td></tr><tr><td>ECLAIR_0_1</td><td>2009-12：android2.0.1</td></tr><tr><td>ECLAIR_MR1</td><td>2010-01：android2.1</td></tr><tr><td>FROYO</td><td>2010-06：android2.2</td></tr><tr><td>GINGERBREAD</td><td>2010-11：android2.3</td></tr><tr><td>GINGERBREAD_MR1</td><td>2011-02：android2.3.3</td></tr><tr><td>HONEYCOMB</td><td>2011-02：android3.0</td></tr><tr><td>HONEYCOMB_MR1</td><td>2011-05：android3.1</td></tr><tr><td>HONEYCOMB_MR2</td><td>2011-06：android3.2</td></tr><tr><td>ICE_CREAM_SANDWICH</td><td>2011-10：android4.0</td></tr><tr><td>ICE_CREAM_SANDWICH_MR1</td><td>2011-12android4.0.3</td></tr><tr><td>JELLY_BEAN</td><td>2012-06：android4.1</td></tr><tr><td>JELLY_BEAN_MR1</td><td>android4.2</td></tr><tr><td>JELLY_BEAN_MR2</td><td>android4.3</td></tr><tr><td>KITKAT</td><td>android4.4</td></tr></tbody></table><pre><code class="java">public void testDemo1(){    //Build类    System.out.println(&quot;Build:&quot;+Build.BOARD);    System.out.println(&quot;Build:&quot;+Build.BOOTLOADER);    System.out.println(&quot;Build:&quot;+Build.CPU_ABI);    System.out.println(&quot;Build:&quot;+Build.CPU_ABI2);    System.out.println(&quot;Build:&quot;+Build.DEVICE);    System.out.println(&quot;Build:&quot;+Build.DISPLAY);    System.out.println(&quot;Build:&quot;+Build.FINGERPRINT);    System.out.println(&quot;Build:&quot;+Build.HARDWARE);    System.out.println(&quot;Build:&quot;+Build.HOST);    System.out.println(&quot;Build:&quot;+Build.ID);    System.out.println(&quot;Build:&quot;+Build.MANUFACTURER);    System.out.println(&quot;Build:&quot;+Build.MODEL);    System.out.println(&quot;Build:&quot;+Build.PRODUCT);    System.out.println(&quot;Build:&quot;+Build.RADIO);    System.out.println(&quot;Build:&quot;+Build.SERIAL);    System.out.println(&quot;Build:&quot;+Build.TAGS);    System.out.println(&quot;Build:&quot;+Build.TIME);    System.out.println(&quot;Build:&quot;+Build.TYPE);    System.out.println(&quot;Build:&quot;+Build.USER);    System.out.println(&quot;Build:&quot;+Build.BOARD);    //Build.VERSION类    System.out.println(&quot;Build.VERSION:&quot;+Build.VERSION.CODENAME);    System.out.println(&quot;Build.VERSION:&quot;+Build.VERSION.INCREMENTAL);    System.out.println(&quot;Build.VERSION:&quot;+Build.VERSION.RELEASE);    System.out.println(&quot;Build.VERSION:&quot;+Build.VERSION.SDK_INT);    //Build.VERSION_CODES类    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.BASE);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.BASE_1_1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.CUPCAKE);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.CUR_DEVELOPMENT);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.ECLAIR);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.ECLAIR_0_1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.ECLAIR_MR1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.FROYO);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.GINGERBREAD);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.GINGERBREAD_MR1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.HONEYCOMB);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.HONEYCOMB_MR1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.HONEYCOMB_MR2);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.ICE_CREAM_SANDWICH);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.JELLY_BEAN);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.JELLY_BEAN_MR1);    System.out.println(&quot;Build.VERSION_CODES:&quot;+Build.VERSION_CODES.JELLY_BEAN_MR2);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab-定时使用</title>
      <link href="/2019/04/22/linux-crontab/"/>
      <url>/2019/04/22/linux-crontab/</url>
      
        <content type="html"><![CDATA[<p>linux 定时器的使用</p><h1 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h1><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p><h2 id="1-命令格式"><a href="#1-命令格式" class="headerlink" title="1. 命令格式"></a>1. 命令格式</h2><blockquote><p>crontab [-u user] file crontab [-u user] [ -e | -l | -r ]</p></blockquote><h2 id="2-命令参数"><a href="#2-命令参数" class="headerlink" title="2. 命令参数"></a>2. 命令参数</h2><ul><li>-u user：用来设定某个用户的crontab服务；</li><li>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</li><li>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</li><li>-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</li><li>-r：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</li><li>-i：在删除用户的crontab文件时给确认提示。</li></ul><h2 id="3-crontab的文件格式"><a href="#3-crontab的文件格式" class="headerlink" title="3. crontab的文件格式"></a>3. crontab的文件格式</h2><p>分 时 日 月 星期 要运行的命令</p><ul><li>第1列分钟0～59</li><li>第2列小时0～23（0表示子夜）</li><li>第3列日1～31</li><li>第4列月1～12</li><li>第5列星期0～7（0和7表示星期天）</li><li>第6列要运行的命令</li></ul><h2 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4. 常用方法"></a>4. 常用方法</h2><h3 id="创建一个新的crontab文件"><a href="#创建一个新的crontab文件" class="headerlink" title="创建一个新的crontab文件"></a>创建一个新的crontab文件</h3><p>向cron进程提交一个crontab文件之前，首先要设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$HOME目录下的. profile文件，在其中加入这样一行:</p><pre><code>EDITOR=vi; export EDITOR</code></pre><p>然后保存并退出。不妨创建一个名为<user> cron的文件，其中<user>是用户名，例如， davecron。在该文件中加入如下的内容。</user></user></p><pre><code># (put your own initials here)echo the date to the console every# 15minutes between 6pm and 6am0,15,30,45 18-06 * * * /bin/echo &#39;date&#39; &gt; /dev/console</code></pre><p>保存并退出。注意前面5个域用空格分隔。</p><p>在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数:</p><pre><code>$ crontab davecron</code></pre><p>现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。同时，新创建文件的一个副本已经被放在/var/spool/cron目录中，文件名就是用户名(即dave)。</p><h3 id="列出crontab文件"><a href="#列出crontab文件" class="headerlink" title="列出crontab文件"></a>列出crontab文件</h3><p>使用-l参数列出crontab文件:</p><pre><code>$ crontab -l0,15,30,45 18-06 * * * /bin/echo `date` &gt; dev/tty1</code></pre><p>可以使用这种方法在$HOME目录中对crontab文件做一备份:</p><pre><code>$ crontab -l &gt; $HOME/mycron</code></pre><p>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p><h3 id="编辑crontab文件"><a href="#编辑crontab文件" class="headerlink" title="编辑crontab文件"></a>编辑crontab文件</h3><p>如果希望添加、删除或编辑crontab文件中的条目，而EDITOR环境变量又设置为vi，那么就可以用vi来编辑crontab文件:</p><pre><code>$ crontab -e</code></pre><p>可以像使用vi编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， cron会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。 我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：</p><pre><code># DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month30 3 1,7,14,21,26 * * /bin/find -name &#39;core&#39; -exec rm {} \;</code></pre><p>保存并退出。</p><p>注解</p><p>最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的定时作业。</p><h3 id="删除crontab文件"><a href="#删除crontab文件" class="headerlink" title="删除crontab文件"></a>删除crontab文件</h3><pre><code>$crontab -r</code></pre><h2 id="5-使用实例"><a href="#5-使用实例" class="headerlink" title="5. 使用实例"></a>5. 使用实例</h2><h3 id="实例1：每1分钟执行一次myCommand"><a href="#实例1：每1分钟执行一次myCommand" class="headerlink" title="实例1：每1分钟执行一次myCommand"></a>实例1：每1分钟执行一次myCommand</h3><pre><code>* * * * * myCommand</code></pre><h3 id="实例2：每小时的第3和第15分钟执行"><a href="#实例2：每小时的第3和第15分钟执行" class="headerlink" title="实例2：每小时的第3和第15分钟执行"></a>实例2：每小时的第3和第15分钟执行</h3><pre><code>3,15 * * * * myCommand</code></pre><h3 id="实例3：在上午8点到11点的第3和第15分钟执行"><a href="#实例3：在上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例3：在上午8点到11点的第3和第15分钟执行"></a>实例3：在上午8点到11点的第3和第15分钟执行</h3><pre><code>3,15 8-11 * * * myCommand</code></pre><h3 id="实例4：每隔两天的上午8点到11点的第3和第15分钟执行"><a href="#实例4：每隔两天的上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例4：每隔两天的上午8点到11点的第3和第15分钟执行"></a>实例4：每隔两天的上午8点到11点的第3和第15分钟执行</h3><pre><code>3,15 8-11 */2  *  * myCommand</code></pre><h3 id="实例5：每周一上午8点到11点的第3和第15分钟执行"><a href="#实例5：每周一上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例5：每周一上午8点到11点的第3和第15分钟执行"></a>实例5：每周一上午8点到11点的第3和第15分钟执行</h3><pre><code>3,15 8-11 * * 1 myCommand</code></pre><h3 id="实例6：每晚的21-30重启smb"><a href="#实例6：每晚的21-30重启smb" class="headerlink" title="实例6：每晚的21:30重启smb"></a>实例6：每晚的21:30重启smb</h3><pre><code>30 21 * * * /etc/init.d/smb restart</code></pre><h3 id="实例7：每月1、10、22日的4-45重启smb"><a href="#实例7：每月1、10、22日的4-45重启smb" class="headerlink" title="实例7：每月1、10、22日的4 : 45重启smb"></a>实例7：每月1、10、22日的4 : 45重启smb</h3><pre><code>45 4 1,10,22 * * /etc/init.d/smb restart</code></pre><h3 id="实例8：每周六、周日的1-10重启smb"><a href="#实例8：每周六、周日的1-10重启smb" class="headerlink" title="实例8：每周六、周日的1 : 10重启smb"></a>实例8：每周六、周日的1 : 10重启smb</h3><pre><code>10 1 * * 6,0 /etc/init.d/smb restart</code></pre><h3 id="实例9：每天18-00至23-00之间每隔30分钟重启smb"><a href="#实例9：每天18-00至23-00之间每隔30分钟重启smb" class="headerlink" title="实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb"></a>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</h3><pre><code>0,30 18-23 * * * /etc/init.d/smb restart</code></pre><h3 id="实例10：每星期六的晚上11-00-pm重启smb"><a href="#实例10：每星期六的晚上11-00-pm重启smb" class="headerlink" title="实例10：每星期六的晚上11 : 00 pm重启smb"></a>实例10：每星期六的晚上11 : 00 pm重启smb</h3><pre><code>0 23 * * 6 /etc/init.d/smb restart</code></pre><h3 id="实例11：每一小时重启smb"><a href="#实例11：每一小时重启smb" class="headerlink" title="实例11：每一小时重启smb"></a>实例11：每一小时重启smb</h3><pre><code>* */1 * * * /etc/init.d/smb restart</code></pre><h3 id="实例12：晚上11点到早上7点之间，每隔一小时重启smb"><a href="#实例12：晚上11点到早上7点之间，每隔一小时重启smb" class="headerlink" title="实例12：晚上11点到早上7点之间，每隔一小时重启smb"></a>实例12：晚上11点到早上7点之间，每隔一小时重启smb</h3><pre><code>0 23-7 * * * /etc/init.d/smb restart</code></pre><h2 id="6-使用注意事项"><a href="#6-使用注意事项" class="headerlink" title="6. 使用注意事项"></a>6. 使用注意事项</h2><h3 id="注意环境变量问题"><a href="#注意环境变量问题" class="headerlink" title="注意环境变量问题"></a>注意环境变量问题</h3><p>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p><p>在crontab文件中定义多个调度任务时，需要特别注环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p><p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p><ol><li><p>脚本中涉及文件路径时写全局路径；</p></li><li><p>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如:</p><pre><code>cat start_cbp.sh!/bin/shsource /etc/profileexport RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;</code></pre></li><li><p>当手动执行脚本OK，但是crontab死活不执行时,很可能是环境变量惹的祸，可尝试在crontab中直接引入环境变量解决问题。如:</p><pre><code>0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</code></pre></li></ol><h3 id="注意清理系统用户的邮件日志"><a href="#注意清理系统用户的邮件日志" class="headerlink" title="注意清理系统用户的邮件日志"></a>注意清理系统用户的邮件日志</h3><p>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。 例如，可以在crontab文件中设置如下形式，忽略日志输出:</p><pre><code>0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</code></pre><p>“/dev/null 2&gt;&amp;1”表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，这样日志输出问题就解决了。</p><h3 id="系统级任务调度与用户级任务调度"><a href="#系统级任务调度与用户级任务调度" class="headerlink" title="系统级任务调度与用户级任务调度"></a>系统级任务调度与用户级任务调度</h3><p>系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过”crontab –uroot –e”来设置，也可以将调度任务直接写入/etc/crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到/etc/crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p><p>当crontab失效时，可以尝试/etc/init.d/crond restart解决问题。或者查看日志看某个job有没有执行/报错tail -f /var/log/cron。</p><p>千万别乱运行crontab -r。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p><p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</p><p>更新系统时间时区后需要重启cron,在ubuntu中服务名为cron:</p><pre><code>$service cron restart</code></pre><p>ubuntu下启动、停止与重启cron:</p><pre><code>$sudo /etc/init.d/cron start$sudo /etc/init.d/cron stop$sudo /etc/init.d/cron restart</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>user-linux</title>
      <link href="/2019/04/22/linux-user/"/>
      <url>/2019/04/22/linux-user/</url>
      
        <content type="html"><![CDATA[<p>linux 下用户管理</p><h1 id="如何添加或删除ubuntu用户和组"><a href="#如何添加或删除ubuntu用户和组" class="headerlink" title="如何添加或删除ubuntu用户和组"></a><a href="https://www.cnblogs.com/adolfmc/archive/2012/11/17/2774476.html" target="_blank" rel="noopener">如何添加或删除ubuntu用户和组</a></h1><p>在创建用户时，需要为新建用户指定一用户组，如果不指定其用户所属的工作组，自动会生成一个与用户名同名的工作组。创建用户user1的时候指定其所属工作组users，例：useradd –g users user1</p><h2 id="一、创建用户："><a href="#一、创建用户：" class="headerlink" title="一、创建用户："></a>一、创建用户：</h2><ol><li>使用命令 useradd<br>例：useradd user1——创建用户user1<pre><code>useradd –e 12/30/2009 user2——创建user2,指定有效期2009-12-30到期用户的缺省UID从500向后顺序增加，500以下作为系统保留账号，可以指定UID，</code></pre>例：useradd –u 600 user3  </li><li>使用 passwd 命令为新建用户设置密码<br>例：passwd user1<br>注意：没有设置密码的用户不能使用。</li><li>命令 usermod 修改用户账户<br>例：将用户 user1的登录名改为  u1，<br>usermod –l u1 user1<br>例：将用户 user1 加入到 users组中，<br>usermod –g users user1<br>例：将用户 user1 目录改为/users/us1</li><li>使用命令 userdel 删除用户账户<br>例：删除用户user2<br>userdel user2<br>例：删除用户 user3，同时删除他的工作目录<br>userdel –r user3</li><li>查看用户信息<br>id命令查看一个用户的UID和GID, 例：查看user4的id<br>id user4<br>finger命令 ——可以查看用户的主目录、启动shell、用户名、地址、电话等信息<br>例：finger user4</li></ol><h2 id="二、用户组："><a href="#二、用户组：" class="headerlink" title="二、用户组："></a>二、用户组：</h2><ol><li>命令 groupadd创建用户组<br>groupadd –g 888 users<br>创建一个组users，其GID为888</li><li>命令 gpasswd为组添加用户<br>只有root和组管理员能够改变组的成员：<br>例：把 user1加入users组<br>gpasswd –a user1 users<br>例：把 user1退出users组<br>gpasswd –d user1 users</li><li>命令groupmod修改组<br>groupmod –n user users       修改组名user为users</li><li>groupdel删除组<br>groupdel users    删除组users</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmmi简介</title>
      <link href="/2019/04/22/cmmi/"/>
      <url>/2019/04/22/cmmi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>  CMMI是英文Capability Maturity Model Integration的缩写。CMMI认证简称软件能力成熟度集成模型，是鉴定企业在开发流程化和质量管理上的国际通行标准，全球软件生产标准大都以此为基点，并都努力争取成为CMMI认证队伍中的一分子。<br>对一个软件企业来说，达到CMMI2就基本上进入了规模开发，基本具备了一个现代化软件企业的基本架构和方法，具备了承接外包项目的能力。CMMI3评估则需要对大软件集成的把握，包括整体架构的整合。一般来说，通过CMMI认证的级别越高，其越容易获得用户的信任，在国内、国际市场上的竞争力也就越强。<br>CMMI一共分为五个等级：</p><h2 id="第一级：-初始级"><a href="#第一级：-初始级" class="headerlink" title="第一级： 初始级"></a>第一级： 初始级</h2><p>软件过程是无序的，有时甚至是混乱的，对过程几乎没有定义，成功取决于个人努力。管理是反应式的。</p><h2 id="第二级：可管理级"><a href="#第二级：可管理级" class="headerlink" title="第二级：可管理级"></a>第二级：可管理级</h2><p>建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。</p><h2 id="第三级：-已定义级"><a href="#第三级：-已定义级" class="headerlink" title="第三级： 已定义级"></a>第三级： 已定义级</h2><p>已将软件管理和工程两方面的过程文档化、标准化，并综合成该组织的标准软件过程。所有项目均使用经批准、剪裁的标准来开发和维护软件，软件产品的生产在整个软件过程是可见的。</p><h2 id="第四级：量化管理级"><a href="#第四级：量化管理级" class="headerlink" title="第四级：量化管理级"></a>第四级：量化管理级</h2><p>分析对软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。</p><h2 id="第五级：优化管理级"><a href="#第五级：优化管理级" class="headerlink" title="第五级：优化管理级"></a>第五级：优化管理级</h2><p>过程的量化反馈和先进的新思想、新技术促使过程持续不断改进。  </p>]]></content>
      
      
      <categories>
          
          <category> 认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmmi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2019/04/22/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/22/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>linux常用命令</p><h1 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h1><p>1、ls命令</p><blockquote><p>   就是list的缩写，通过ls 命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等<br>    常用参数搭配：<br>    ls -a 列出目录所有文件，包含以.开始的隐藏文件<br>    ls -A 列出除.及..的其它文件       </p></blockquote><p>2、cd命令</p><blockquote><pre><code>    (changeDirectory),命令语法：cd [目录名]。说明：切换当前目录至dirName     实例：     （1）进入要目录     cd /     （2）进入&quot;家&quot;目录     cd ~     （3）进入上一次工作路径     cd -     （4）把上个命令的参数作为cd参数使用。     cd !$</code></pre></blockquote><p>3、pwd命令</p><blockquote><pre><code>   查看当前工作目录路径     实例：     （1）查看当前路径     pwd     （2）查看软链接的实际路径     pwd -P</code></pre></blockquote><p>4、mkdir命令</p><blockquote><pre><code>   创建文件夹     可用选项：     -m: 对新建目录设置存取权限,也可以用chmod命令设置;         -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那                      些尚不在的目录,即一次可以建立多个目录;     实例：     （1）当前工作目录下创建名为t的文件夹     mkdir t     （2）在tmp目录下创建路径为test/t1/t的目录，若不存在，则创建     mkdir -p /tmp/test/t1/t</code></pre></blockquote><p>5、rm命令</p><blockquote><pre><code>   删除一个目录中的一个或多个文件或目录，如果没有使用- r选项，则rm不会删除目录。如果使用              rm 来删除文件，通常仍可以将该文件恢复原状     rm [选项] 文件…     实例：     （1）删除任何.log文件；删除前逐一询问确认     rm -i *.log     （2）删除test子目录及子目录中所有档案删除,并且不用一一确认     rm -rf test     （3）删除以-f开头的文件     rm -- -f*</code></pre><p>6、rmdir命令<br>       从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。<br>         注意：不能删除非空目录<br>         实例：<br>         （1）当parent子目录被删除后使它也成为空目录的话，则顺便一并删除<br>         rmdir -p parent/child/child11</p></blockquote><p>7、mv命令</p><blockquote><pre><code>  移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。           当第二个参数为目录时，可刚多个文件以空格分隔作为第一参数，移动多个文件到参数2指定的目录中     实例：     （1）将文件test.log重命名为test1.txt     mv test.log test1.txt     （2）将文件log1.txt,log2.txt,log3.txt移动到根的test3目录中     mv llog1.txt log2.txt log3.txt /test3     （3）将文件file1改名为file2，如果file2已经存在，则询问是否覆盖     mv -i log1.txt log2.txt     （4）移动当前文件夹下的所有文件到上一级目录     mv * ../</code></pre></blockquote><p>8、cp命令</p><blockquote><pre><code>  将源文件复制至目标文件，或将多个源文件复制至目标目录。     注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在shell脚本中，如果不加-i参数，则不会提示，而是直接覆盖！     -i 提示     -r 复制目录及目录内所有项目     -a 复制的文件与原文件时间一样     实例：     （1）复制a.txt到test目录下，保持原文件时间,如果原文件存在提示是否覆盖     cp -ai a.txt test     （2）为a.txt建议一个链接（快捷方式）     cp -s a.txt link_a.txt</code></pre></blockquote><p>9、cat命令</p><blockquote><pre><code> cat主要有三大功能：     1.一次显示整个文件:cat filename     2.从键盘创建一个文件:cat &gt; filename 只能创建新文件,不能编辑已有文件.     3.将几个文件合并为一个文件:cat file1 file2 &gt; file     -b对非空输出行号     -n输出所有行号     实例：     （1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里     cat -n log2012.log log2013.log     （2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里     cat -b log2012.log log2013.log log.log     （3）使用here doc生成新文件     cat &gt;log.txt &lt;&lt;EOF</code></pre><p>Hello<br>World<br>PWD=$(pwd)<br>EOF<br>         ls -l log.txt<br>         cat log.txt<br>         Hello<br>         World<br>         PWD=/opt/soft/test<br>         （4）反向列示<br>         tac log.txt<br>         PWD=/opt/soft/test<br>         World<br>         Hello</p></blockquote><p>10、more命令</p><blockquote><pre><code>功能类似于cat, more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示     -&gt;&gt;命令参数：     +n      从笫n行开始显示     -n       定义屏幕大小为n行     +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示      -c       从顶部清屏，然后显示     -d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能     -l        忽略Ctrl+l（换页）字符     -p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似     -s       把连续的多个空行显示为一行     -u       把文件内容中的下画线去掉     -&gt;&gt;常用操作命令：     Enter    向下n行，需要定义。默认为1行     Ctrl+F   向下滚动一屏     空格键  向下滚动一屏     Ctrl+B  返回上一屏     =       输出当前行的行号     ：f     输出文件名和当前行的行号     V      调用vi编辑器     !命令   调用Shell，并执行命令     q       退出more     实例：     （1）显示文件中从第3行起的内容     more +3 text.txt     （2）在所列出文件目录详细信息，借助管道使每次显示5行     ls -l | more -5     按空格显示下5行</code></pre></blockquote><p>11、less命令</p><blockquote><p>   less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。<br>         常用命令参数<br>         -i  忽略搜索时的大小写<br>         -N  显示每行的行号<br>         -o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>         -s  显示连续空行为一行<br>         /字符串：向下搜索“字符串”的功能<br>         ?字符串：向上搜索“字符串”的功能<br>         n：重复前一个搜索（与 / 或 ? 有关）<br>         N：反向重复前一个搜索（与 / 或 ? 有关）<br>         -x &lt;数字&gt; 将“tab”键显示为规定的数字空格<br>         b  向后翻一页<br>         d  向后翻半页<br>         h  显示帮助界面<br>         Q  退出less 命令<br>         u  向前滚动半页<br>         y  向前滚动一行<br>         空格键 滚动一行<br>         回车键 滚动一页<br>         [pagedown]： 向下翻动一页<br>         [pageup]：   向上翻动一页<br>         实例：<br>         （1）ps查看进程信息并通过less分页显示<br>         ps -aux | less -N<br>         （2）查看多个文件<br>         less 1.log 2.log<br>         可以使用n查看下一个，使用p查看前一个</p></blockquote><p>12、head命令</p><blockquote><pre><code>   head 用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。     常用参数：     -n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）     实例：     （1）显示1.log文件中前20行     head 1.log -n 20     （2）显示1.log文件前20字节     head -c 20 log2014.log     （3）显示t.log最后10行     head -n -10 t.log</code></pre></blockquote><p>13、tail命令</p><blockquote><pre><code>   用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。     常用参数：     -f 循环读取（常用于查看递增的日志文件）     -n&lt;行数&gt; 显示行数（从后向前）     （1）循环读取逐渐增加的文件内容     ping 127.0.0.1 &gt; ping.log &amp;（后台运行：可使用jobs -l查看，也可使用fg将其移到前台运行）     tail -f ping.log（查看日志）</code></pre></blockquote><p>14、which命令</p><blockquote><pre><code>   在linux要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：     which     查看可执行文件的位置。     whereis 查看文件的位置。     locate  配合数据库查看文件位置。     find        实际搜寻硬盘查询文件名称。     which是在PATH就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。     常用参数：     -n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。     实例：     （1）查看ls命令是否存在，执行哪个     which ls     （2）查看which     which which     （3）查看cd     which cd（显示不存在，因为cd是内建命令，而which查找显示是PATH中的命令）     查看当前PATH配置：echo $PATH；或使用env查看所有环境变量及对应值</code></pre></blockquote><p>15、whereis命令</p><blockquote><pre><code>   whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis及locate都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。     常用参数：     -b   定位可执行文件。     -m   定位帮助文件。     -s   定位源代码文件。     -u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。     实例：     （1）查找locate程序相关文件     whereis locate     （2）查找locate的源码文件     whereis -s locate     （3）查找lcoate的帮助文件     whereis -m locate</code></pre></blockquote><p>16、locate命令</p><blockquote><pre><code>   locate通过搜寻系统内建文档数据库达到快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性调用的。默认情况下locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc/crontab)。     locate与find命令相似，可以使用如*、?等进行正则匹配查找     常用参数：     -l num（要显示的行数）     -f   将特定的档案系统排除在外，如将proc排除在外     -r   使用正则运算式做为寻找条件     实例：     （1）查找和pwd相关的所有文件(文件名中包含pwd）     locate pwd     （2）搜索etc目录下所有以sh开头的文件     locate /etc/sh     （3）查找/var目录下，以reason结尾的文件     locate -r &#39;^/var.reason$&#39;（其中.表示一个字符，表示任务多个；.*表示任意多个字符）</code></pre></blockquote><p>17、find命令</p><blockquote><pre><code>   用于在文件树中查找文件，并作出相应的处理     命令格式：     find pathname -options [-print -exec -ok ...]     命令参数：     pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。     -print： find命令将匹配的文件输出到标准输出。     -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; {  } \;，注意{   }和\；之间的空格。     -ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。     命令选项：     -name 按照文件名查找文件     -perm 按文件权限查找文件     -user 按文件属主查找文件     -group  按照文件所属的组来查找文件。     -type  查找某一类型的文件，诸如：               b - 块设备文件               d - 目录               c - 字符设备文件               l - 符号链接文件               p - 管道文件               f - 普通文件     -size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小     -amin n   查找系统中最后N分钟访问的文件     -atime n  查找系统中最后n*24小时访问的文件     -cmin n   查找系统中最后N分钟被改变文件状态的文件     -ctime n  查找系统中最后n*24小时被改变文件状态的文件     -mmin n   查找系统中最后N分钟被改变文件数据的文件     -mtime n  查找系统中最后n*24小时被改变文件数据的文件     (用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )     -maxdepth n 最大查找目录深度     -prune选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略     -newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项     实例：     （1）查找48小时内修改过的文件     find -atime -2     （2）在当前目录查找 以.log结尾的文件。 &quot;. &quot;代表当前目录     find ./ -name &#39;*.log&#39;     （3）查找/opt目录下 权限为 777的文件     find /opt -perm 777     （4）查找大于1K的文件     find -size +1000c     find -size 1000c 查找等于1000字符的文件     -exec         参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{}   花括号代表前面find查找出来的文件名。     实例：     （5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）     find . -type f -mtime +10 -exec rm -f {} \;     （6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除     find . -name &#39;*.log&#39; mtime +5 -ok -exec rm {} \;     （7）当前目录下查找文件名以passwd开头，内容包含&quot;pkg&quot;字符的文件     find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; {} \;     （8）用exec选项执行cp命令      find . -name &#39;*.log&#39; -exec cp {} test3 \;     -xargs find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。     实例：     （9）查找当前目录下每个普通文件，然后使用xargs来判断文件类型     find . -type f -print | xargs file     （10）查找当前目录下所有以js结尾的并且其中包含&#39;editor&#39;字符的普通文件     find . -type f -name &quot;*.js&quot; -exec grep -lF &#39;ueditor&#39; {} \;     find -type f -name &#39;*.js&#39; | xargs grep -lF &#39;editor&#39;     （11）利用xargs执行mv命令     find . -name &quot;*.log&quot; | xargs -i mv {} test4     （12）用grep命令在当前目录下的所有普通文件中搜索hostnames这个词,并标出所在行     find . -name *(转义） -type f -print | xargs grep -n &#39;hostnames&#39;     （13）查找当前目录中以一个小写字母开头，最后是4到9加上.log结束的文件     find . -name &#39;[a-z]*[4-9].log&#39; -print     （14）在test目录查找不在test4子目录查找     find test -path &#39;test/test4&#39; -prune -o -print     （15）实例1：查找更改时间比文件log2012.log新但比文件log2017.log旧的文件     find -newer log2012.log ! -newer log2017.log     使用depth选项：     depth选项可以使find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。      实例：find命令从文件系统的根目录开始，查找一个名为CON.FILE的文件。 它将首先匹配所有的文件然后再进入子目录中查找     find / -name &quot;CON.FILE&quot; -depth -print</code></pre></blockquote><p>18、chmod命令</p><blockquote><pre><code>   用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。     每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用ls -l test.txt查找     以文件log2012.log为例：     -rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log     第一列共有10个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。从第二个字符开始到第十个共9个字符，3个字符一组，分别表示了3组用户对文件或者目录的权限。权限字符用横线代表空许可，r代表只读，w代表写，x代表可执行。     常用参数：     -c 当发生改变时，报告处理信息     -R 处理指定目录以及其子目录下所有文件     权限范围：     u ：目录或者文件的当前的用户     g ：目录或者文件的当前的群组     o ：除了目录或者文件的当前用户或群组之外的用户或者群组     a ：所有的用户及群组     权限代号：     r ：读权限，用数字4表示     w ：写权限，用数字2表示     x ：执行权限，用数字1表示     - ：删除权限，用数字0表示     s ：特殊权限     实例：     （1）增加文件t.log所有用户可执行权限     chmod a+x t.log     （2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息     chmod u=r t.log -c     （3）给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限     chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)     （4）将test目录及其子目录所有文件添加可读权限     chmod u+r,g+r,o+r -R text/ -c</code></pre></blockquote><p>19、tar命令</p><blockquote><pre><code>   用来压缩和解压文件。tar本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。     弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件     常用参数：     -c 建立新的压缩文件     -f 指定压缩文件     -r 添加文件到已经压缩文件包中     -u 添加改了和现有的文件到压缩包中     -x 从压缩包中抽取文件     -t 显示压缩文件中的内容     -z 支持gzip压缩     -j 支持bzip2压缩     -Z 支持compress解压文件     -v 显示操作过程     有关gzip及bzip2压缩     gzip实例：压缩gzip fileName .tar.gz和.tgz  解压：gunzip filename.gz或gzip -d filename.gz     对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz     bz2实例：压缩bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2     对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2     实例：     （1）将文件全部打包成tar包     tar -cvf log.tar 1.log,2.log 或tar -cvf log.*     （2）将/etc下的所有文件及目录打包到指定目录，并使用gz压缩     tar -zcvf /tmp/etc.tar.gz /etc     （3）查看刚打包的文件内容（一定加z，因为是使用gzip压缩的）     tar -ztvf /tmp/etc.tar.gz     （4）要压缩打包/home, /etc ，但不要 /home/dmtsai     tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc</code></pre></blockquote><p>20、chown命令</p><blockquote><pre><code>   chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符     -c 显示更改的部分的信息     -R 处理指定目录及子目录     实例：     （1）改变拥有者和群组 并显示改变信息</code></pre><p>　　　　chown -c mail:mail log2012.log<br>         （2）改变文件群组<br>         chown -c :mail t.log<br>         （3）改变文件夹及子文件目录属主及属组为mail<br>         chown -cR mail: test/<br>         （4）改变文件</p></blockquote><p>21、df命令</p><blockquote><pre><code>   显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示     -a 全部文件系统列表     -h 以方便阅读的方式显示信息     -i 显示inode信息     -k 区块为1024字节     -l 只显示本地磁盘     -T 列出文件系统类型     实例：     （1）显示磁盘使用情况     df -l     （2）以易读方式列出所有文件系统及其类型     df -haT</code></pre></blockquote><p>22、du命令</p><blockquote><pre><code>   du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看     命令格式：     du [选项] [文件]     常用参数：     -a 显示目录中所有文件大小     -k 以KB为单位显示文件大小     -m 以MB为单位显示文件大小     -g 以GB为单位显示文件大小     -h 以易读方式显示文件大小     -s 仅显示总计     -c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和     实例：     （1）以易读方式显示文件夹内及子文件夹大小     du -h scf/     （2）以易读方式显示文件夹内所有文件大小     du -ah scf/     （3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和     du -hc test/ scf/     （4）输出当前目录下各个子目录所使用的空间     du -hc --max-depth=1 scf/</code></pre></blockquote><p>23、ln命令</p><blockquote><pre><code>   功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过ln创建的链接（link）减少磁盘占用量。     链接分类：软件链接及硬链接     软链接：     1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式     2.软链接可以 跨文件系统 ，硬链接不可以     3.软链接可以对一个不存在的文件名进行链接     4.软链接可以对目录进行链接     硬链接:     1.硬链接，以文件副本的形式存在。但不占用实际空间。     2.不允许给目录创建硬链接     3.硬链接只有在同一个文件系统中才能创建     需要注意：     第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；     第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。     第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。     常用参数：     -b 删除，覆盖以前建立的链接     -s 软链接（符号链接）     -v 显示详细处理过程     实例：     （1）给文件创建软链接，并显示操作信息     ln -sv source.log link.log     （2）给文件创建硬链接，并显示操作信息     ln -v source.log link1.log     （3）给目录创建软链接     ln -sv /opt/soft/test/test3 /opt/soft/test/test5</code></pre></blockquote><p>24、date命令</p><blockquote><pre><code>   显示或设定系统的日期与时间     命令参数：     -d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。     -s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。     -u 　显示GMT。     %H 小时(00-23)     %I 小时(00-12)     %M 分钟(以00-59来表示)     %s 总秒数。起算时间为1970-01-01 00:00:00 UTC。     %S 秒(以本地的惯用法来表示)     %a 星期的缩写。     %A 星期的完整名称。     %d 日期(以01-31来表示)。     %D 日期(含年月日)。     %m 月份(以01-12来表示)。     %y 年份(以00-99来表示)。     %Y 年份(以四位数来表示)。     实例：     （1）显示下一天     date +%Y%m%d --date=&quot;+1 day&quot;  //显示下一天的日期     （2）-d参数使用     date -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三     date -d &#39;2 weeks&#39; 2周后的日期     date -d &#39;next monday&#39; (下周一的日期)     date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d     date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d     date -d last-month +%Y%m(上个月是几月)     date -d next-month +%Y%m(下个月是几月)</code></pre></blockquote><p>25、cal命令</p><blockquote><pre><code>   可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份     常用参数：     -3 显示前一月，当前月，后一月三个月的日历     -m 显示星期一为第一列     -j 显示在当前年第几天     -y [year]显示当前年[year]份的日历     实例：     （1）显示指定年月日期     cal 9 2012     （2）显示2013年每个月日历     cal -y 2013     （3）将星期一做为第一列,显示前中后三月     cal -3m</code></pre></blockquote><p>26、grep命令</p><blockquote><pre><code>   强大的文本搜索命令，grep(Global Regular Expression Print)全局正则表达式搜索     grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。     命令格式：     grep [option] pattern file|dir     常用参数：     -A n --after-context显示匹配字符后n行     -B n --before-context显示匹配字符前n行     -C n --context 显示匹配字符前后n行     -c --count 计算符合样式的列数     -i 忽略大小写     -l 只列出文件内容符合指定的样式的文件名称     -f 从文件中读取关键词     -n 显示匹配内容的所在文件中行数     -R 递归查找文件夹     grep的规则表达式:     ^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。   </code></pre></blockquote><pre><code>       #锚定行的结束 如：&#39;grep&#39;匹配所有以grep结尾的行。        .  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。        *  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。        .*   #一起用代表任意字符。       []   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。        [^]  #匹配一个不在指定范围内的字符，如：&#39;A-FH-Zrep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。        (..)  #标记匹配字符，如&#39;(love)&#39;，love被标记为1。        &lt;      #锚定单词的开始，如:&#39;&lt;grep&#39;匹配包含以grep开头的单词的行。        &gt;      #锚定单词的结束，如&#39;grep&gt;&#39;匹配包含以grep结尾的单词的行。        x{m}  #重复字符x，m次，如：&#39;0{5}&#39;匹配包含5个o的行。        x{m,}  #重复字符x,至少m次，如：&#39;o{5,}&#39;匹配至少有5个o的行。        x{m,n}  #重复字符x，至少m次，不多于n次，如：&#39;o{5,10}&#39;匹配5--10个o的行。       \w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。       \W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。       \b    #单词锁定符，如: &#39;\bgrep\b&#39;只匹配grep。     实例：     （1）查找指定进程     ps -ef | grep svn     （2）查找指定进程个数     ps -ef | grep svn -c     （3）从文件中读取关键词     cat test1.txt | grep -f key.log     （4）从文件夹中递归查找以grep开头的行，并只列出文件     grep -lR &#39;^grep&#39; /tmp     （5）查找非x开关的行内容     grep &#39;^x&#39; test.txt     （6）显示包含ed或者at字符的内容行     grep -E &#39;ed|at&#39; test.txt</code></pre><p>27、wc命令</p><blockquote><pre><code>   wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出     命令格式：     wc [option] file..     命令参数：     -c 统计字节数     -l 统计行数     -m 统计字符数     -w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串     实例：     （1）查找文件的  行数 单词数 字节数 文件名     wc text.txt 结果：7     8     70     test.txt     （2）统计输出结果的行数     cat test.txt | wc -l</code></pre></blockquote><p>28、ps命令</p><blockquote><pre><code>   ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用top     linux上进程有5种状态:     \1. 运行(正在运行或在运行队列中等待)     \2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)     \3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)     \4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)     \5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)     ps工具标识进程的5种状态码:     D 不可中断 uninterruptible sleep (usually IO)     R 运行 runnable (on run queue)     S 中断 sleeping     T 停止 traced or stopped     Z 僵死 a defunct (”zombie”) process     命令参数：     -A 显示所有进程     a 显示所有进程     -a 显示同一终端下所有进程     c 显示进程真实名称     e 显示环境变量     f 显示进程间的关系     r 显示当前终端运行的进程     -aux 显示所有包含其它使用的进程     实例：     （1）显示当前所有进程环境变量及进程间关系     ps -ef     （2）显示当前所有进程     ps -A     （3）与grep联用查找某进程     ps -aux | grep apache     （4）找出与 cron 与 syslog 这两个服务有关的 PID 号码     ps aux | grep &#39;(cron|syslog)&#39;</code></pre></blockquote><p>29、top命令</p><blockquote><pre><code>   显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等     常用参数：     -c 显示完整的进程命令     -s 保密模式     -p &lt;进程号&gt; 指定进程显示     -n &lt;次数&gt;循环显示次数     实例：     （1）     top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35     Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie     Cpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st     Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers     Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                    28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java       前五行是当前系统情况整体的统计信息区，     第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：     14:06:23 — 当前系统时间     up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）     2 users — 当前有2个用户登录系统     load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。     load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。     第二行，Tasks — 任务（进程），具体信息说明如下：     系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。     第三行，cpu状态信息，具体属性说明如下：     5.9%us — 用户空间占用CPU的百分比。     3.4% sy — 内核空间占用CPU的百分比。     0.0% ni — 改变过优先级的进程占用CPU的百分比     90.4% id — 空闲CPU百分比     0.0% wa — IO等待占用CPU的百分比     0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比     0.2% si — 软中断（Software Interrupts）占用CPU的百分比     备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！     第四行,内存状态，具体信息如下：     32949016k total — 物理内存总量（32GB）     14411180k used — 使用中的内存总量（14GB）     18537836k free — 空闲内存总量（18GB）     169884k buffers — 缓存的内存量 （169M）     第五行，swap交换分区信息，具体信息说明如下：     32764556k total — 交换区总量（32GB）     0k used — 使用的交换区总量（0K）     32764556k free — 空闲交换区总量（32GB）     3612636k cached — 缓冲的交换区总量（3.6GB）     第六行，空行。     第七行以下：各进程（任务）的状态监控，项目列信息说明如下：     PID — 进程id     USER — 进程所有者     PR — 进程优先级     NI — nice值。负值表示高优先级，正值表示低优先级     VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES     RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA     SHR — 共享内存大小，单位kb     S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程     %CPU — 上次更新到现在的CPU时间占用百分比     %MEM — 进程使用的物理内存百分比     TIME+ — 进程使用的CPU时间总计，单位1/100秒     COMMAND — 进程名称（命令名/命令行）     top交互命令     h 显示top交互命令帮助信息     c 切换显示命令名称和完整命令行     m 以内存使用率排序     P 根据CPU使用百分比大小进行排序     T 根据时间/累计时间进行排序     W 将当前设置写入~/.toprc文件中     o或者O 改变显示项目的顺序</code></pre></blockquote><p>30、kill命令</p><blockquote><pre><code>   发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用“-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。     常用参数：     -l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称     -a  当处理当前进程时，不限制命令名和进程号的对应关系     -p  指定kill 命令只打印相关进程的进程号，而不发送任何信号     -s  指定发送信号     -u  指定用户     实例：     （1）先使用ps查找进程pro1，然后用kill杀掉     kill -9 $(ps -ef | grep pro1)</code></pre></blockquote><p>31、free命令</p><blockquote><pre><code>   显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。     命令参数：     -b 以Byte显示内存使用情况     -k 以kb为单位显示内存使用情况     -m 以mb为单位显示内存使用情况     -g 以gb为单位显示内存使用情况     -s&lt;间隔秒数&gt; 持续显示内存     -t 显示内存使用总合     实例：     （1）显示内存使用情况     free     free -k     free -m     （2）以总和的形式显示内存的使用信息     free -t     （3）周期性查询内存使用情况     free -s 10</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
